(window.webpackJsonp=window.webpackJsonp||[]).push([[337],{1653:function(t,v,s){"use strict";s.r(v);var e=s(44),l=Object(e.a)({},(function(){var t=this,v=t.$createElement,s=t._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"理解浏览器背后的渲染原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解浏览器背后的渲染原理"}},[t._v("#")]),t._v(" 理解浏览器背后的渲染原理")]),t._v(" "),s("p",[t._v("头脑风暴")]),t._v(" "),s("ul",[s("li",[t._v("理解浏览器的组成")]),t._v(" "),s("li",[t._v("读取 html")]),t._v(" "),s("li",[t._v("浏览器是多进程的")]),t._v(" "),s("li",[t._v("浏览器渲染进程")]),t._v(" "),s("li",[t._v("浏览器渲染流程\n之前的 《JS 事件循环机制》已经分享记录了，浏览器背后的运行机制。这一次，需要结合 chrome 浏览器的性能分析工具进行处理。")]),t._v(" "),s("li",[t._v("浏览器原理")]),t._v(" "),s("li",[t._v("提及下打包工具得出的文件是如何动态加载到 html 中的。js、css、image 等，在谈及 html 的渲染加载的时候，可以谈及这些。例如 vue 的加载等是如何做到的，就是动态生成 "),s("code",[t._v("script")]),t._v("、"),s("code",[t._v("style")]),t._v("等标签加载到 html 页面中的时机。利用了按需加载策略。")])]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[t._v("http://arvindr21.github.io/howBrowserWorks/#/")])])])}),[],!1,null,null,null);v.default=l.exports}}]);