(window.webpackJsonp=window.webpackJsonp||[]).push([[270],{1552:function(t,v,_){"use strict";_.r(v);var e=_(44),r=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"web-前端架构之旅（一）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#web-前端架构之旅（一）"}},[t._v("#")]),t._v(" Web 前端架构之旅（一）")]),t._v(" "),_("p",[t._v("**提出问题比解决问题更难。**设计难于实现，你应当花70%的时间来设计而不是用来实现。有的设计者甚至不参与实现，设计者与实现者的身份也是随时在转换的，善于思考的实现者本身就是设计者。")]),t._v(" "),_("h2",{attrs:{id:"前言-系统架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言-系统架构"}},[t._v("#")]),t._v(" 前言 系统架构")]),t._v(" "),_("ul",[_("li",[t._v("前端技术\n"),_("ul",[_("li",[t._v("性能优化\n"),_("ul",[_("li",[t._v("首先是如何发现问题")]),t._v(" "),_("li",[t._v("发现问题之后，是如何分析其中原因")]),t._v(" "),_("li",[t._v("找到原因之后，采用的解决方法")]),t._v(" "),_("li",[t._v("解决之后，是否真实的对用户体验有所提升")])])]),t._v(" "),_("li",[t._v("对框架的理解")]),t._v(" "),_("li",[t._v("深入 Node.js 领域（编写一些 Webpack 插件）")]),t._v(" "),_("li",[t._v("Canvas 与 WebGL（）")])])]),t._v(" "),_("li",[t._v("通往架构师之路\n"),_("ul",[_("li",[t._v("跨界")]),t._v(" "),_("li",[t._v("尝鲜（微服务、微前端）")]),t._v(" "),_("li",[t._v("工具和平台化建设")]),t._v(" "),_("li",[t._v("流程和规范化")]),t._v(" "),_("li",[t._v("方法论")]),t._v(" "),_("li",[t._v("安全意识")]),t._v(" "),_("li",[t._v("团队合作")])])])]),t._v(" "),_("p",[t._v("分层架构")]),t._v(" "),_("h3",{attrs:{id:"bs-架构与-cs-架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#bs-架构与-cs-架构"}},[t._v("#")]),t._v(" BS 架构与 CS 架构")]),t._v(" "),_("p",[t._v("C/S 是双向的通讯，建立连接后会一直保持，任何一方都可以随时向对方发送信息。比如 QQ 客户端登录后，腾讯的服务器可以随时把新的消息发给客户端，客户端也可以随时向腾讯的服务器发送信息、B/S 是「查询」式的通讯，客户端向服务器查询一些信息，在服务器回应之后，(逻辑上)会立刻断开连接。只有客户端向服务器查询时，服务器才能向客户端发送信息，服务器不能主动地向客户端发送信息。比如通过浏览器访问网站时，只有当你访问一个网站时，网站才可以向你提供信息。「访问」是一个瞬间的行为，当网页加载完成以后，网站就无法再发送额外的信息。简而言之，"),_("code",[t._v("C/S 是双向通讯，B/S 是一问一答")]),t._v("。有人可能想到一些反例，比如 Web QQ, 事实上(根据我前一阵的试验) Web QQ 会通过「阻塞长连接」的方式获取新的聊天消息，依然还是 B/S 的模式。当然现在也有 WebSocket, 可以在浏览器上实现 C/S 通讯，不过目前应用还不够广泛。")]),t._v(" "),_("p",[t._v("作者：王子亭\n链接：https://www.zhihu.com/question/21803672/answer/19373740\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")]),t._v(" "),_("h2",{attrs:{id:"消息队列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息队列"}},[t._v("#")]),t._v(" 消息队列")]),t._v(" "),_("h2",{attrs:{id:"mvc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[t._v("#")]),t._v(" MVC")]),t._v(" "),_("ul",[_("li",[t._v("Model（除了数据，里面也有 controller，用于控制数据变化的业务逻辑。）")]),t._v(" "),_("li",[t._v("View（渲染视图的逻辑，数据依赖于 Model）")]),t._v(" "),_("li",[t._v("Controller（用于控制视图变化的交互逻辑）")])]),t._v(" "),_("p",[t._v("通常 controller 通常分为两部分，很少把 controller 单独抽离出来的。")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("一部分是位于 Model 里")])]),t._v(" "),_("li",[_("p",[t._v("一部分位于 view 里\n像一个业务 vue 组件，操作业务数据与视图交互的逻辑明显是混合在一起了。")])]),t._v(" "),_("li",[_("p",[t._v("model 改变，触发 view 里的 controller 进行视图更新。")])]),t._v(" "),_("li",[_("p",[t._v("view 交互，触发 model 里的 controller 进行数据改变。")])]),t._v(" "),_("li",[_("p",[t._v("view 的显示依赖于 model。")])])]),t._v(" "),_("h3",{attrs:{id:"同步"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#同步"}},[t._v("#")]),t._v(" 同步")]),t._v(" "),_("p",[t._v("同步不仅仅是同步的"),_("code",[t._v("读取")]),t._v("数据，还包括"),_("code",[t._v("回写")]),t._v("。假设一份数据被三个视图所用，如果其他一个视图对数据发生了修改，那么修改应该也同时反馈到另外两个视图上。")]),t._v(" "),_("p",[t._v("关于数据我们应该存一份，还是存在 N 个视图中都保存一份副本（Vue 则是每个视图都有一份副本）")]),t._v(" "),_("h3",{attrs:{id:"多个消费者"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多个消费者"}},[t._v("#")]),t._v(" 多个消费者")]),t._v(" "),_("p",[t._v("数据的消费放不一定是视图，还有可能是 selector。它不一定被展示，还有可能被用于计算。")]),t._v(" "),_("h3",{attrs:{id:"通信"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#通信"}},[t._v("#")]),t._v(" 通信")]),t._v(" "),_("p",[t._v("有模块存在的地方它们之间就需要通信。")]),t._v(" "),_("p",[t._v("通信要解决的问题总结起来就是：我把数据传递给别人，或者别人又把数据传递给我。")]),t._v(" "),_("p",[t._v("可以使用的手段：")]),t._v(" "),_("ul",[_("li",[t._v("主动 pull：调用模块的获取数据方法，例如 "),_("code",[t._v("store.getData()")])]),t._v(" "),_("li",[t._v("主动 push")]),t._v(" "),_("li",[t._v("Broadcast：也就是 pub/ sub 模式，向外广播事件/主题，可是它不知道谁订阅了当前广播的主题。")]),t._v(" "),_("li",[t._v("Command：命令模式，command 就是显式的调用，指示去即将完成一件事，结果是可以预见的。而 event 则是通知而已。 Redux 中的 aciton/ dispatch 就是 command 机制。")]),t._v(" "),_("li",[t._v("被 push：监听事件的发生，Backbone.js 的 "),_("code",[t._v('this.listenTo(app.todos, "add", this.addOne)')]),t._v(" 就是在监听 todos 集合里“添加”事件的发生。")])]),t._v(" "),_("p",[t._v("但是有一些场景中，这些模式可能是组合使用的，比如：")]),t._v(" "),_("ul",[_("li",[t._v("todos 发生了修改稿，广播 update 事件，但事件信息中并不包含最新数据。")]),t._v(" "),_("li",[t._v("view 监听 update 事件的发生，但是需要手动调用接口获取最新的数据。")])]),t._v(" "),_("h3",{attrs:{id:"mvc-带来的问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvc-带来的问题"}},[t._v("#")]),t._v(" MVC 带来的问题")]),t._v(" "),_("h4",{attrs:{id:"mvvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[t._v("#")]),t._v(" MVVM")]),t._v(" "),_("h2",{attrs:{id:"插件化架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#插件化架构"}},[t._v("#")]),t._v(" 插件化架构")]),t._v(" "),_("h3",{attrs:{id:"vue-router-思想"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-思想"}},[t._v("#")]),t._v(" vue-router 思想")]),t._v(" "),_("h2",{attrs:{id:"前端-ioc-思想"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前端-ioc-思想"}},[t._v("#")]),t._v(" 前端 IOC 思想")]),t._v(" "),_("h2",{attrs:{id:"组件化思想"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#组件化思想"}},[t._v("#")]),t._v(" 组件化思想")]),t._v(" "),_("ul",[_("li",[t._v("组件层次结构设计")]),t._v(" "),_("li",[t._v("组件各自的职责划分")])]),t._v(" "),_("p",[t._v("检查表")]),t._v(" "),_("ul",[_("li",[_("ol",[_("li",[t._v("层次结构和 UML 类图")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"2"}},[_("li",[t._v("扁平化、面向数据的 state/props")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"3"}},[_("li",[t._v("更加纯粹的 State 变化")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"4"}},[_("li",[t._v("低耦合")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"5"}},[_("li",[t._v("辅助代码分离")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"6"}},[_("li",[t._v("提炼精华")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"7"}},[_("li",[t._v("及时模块化")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"8"}},[_("li",[t._v("集中/统一的状态管理")])])])]),t._v(" "),_("p",[t._v("组件设计四要素")]),t._v(" "),_("ul",[_("li",[t._v("属性（props、state）")]),t._v(" "),_("li",[t._v("方法（method）")]),t._v(" "),_("li",[t._v("事件（event）")]),t._v(" "),_("li",[t._v("子视图（slot）")])]),t._v(" "),_("p",[t._v("一些细节")]),t._v(" "),_("ul",[_("li",[t._v("属性的类型、是否必填、默认值（属性类型确定后不再变化）")]),t._v(" "),_("li",[t._v("方法的参数、返回值（需要考虑变化的情况）")]),t._v(" "),_("li",[t._v("事件回调函数的参数")]),t._v(" "),_("li",[t._v("插槽可获取到的局部参数")])]),t._v(" "),_("p",[t._v("扩展能力")]),t._v(" "),_("ul",[_("li",[t._v("扩展组件的能力")]),t._v(" "),_("li",[t._v("扩展组件的视图")])]),t._v(" "),_("p",[t._v("上图并不是基于某些官方标准，比如 UML 类图，它是我基本上创建的一套表达规则。例如，在 props 、方法的参数和返回值的数据类型定义声明都是基于 Typescript 语法。")]),t._v(" "),_("h2",{attrs:{id:"依赖注入"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入"}},[t._v("#")]),t._v(" 依赖注入")]),t._v(" "),_("h2",{attrs:{id:"生产者与消费者"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#生产者与消费者"}},[t._v("#")]),t._v(" 生产者与消费者")]),t._v(" "),_("ul",[_("li",[t._v("任务编排")]),t._v(" "),_("li",[t._v("任务调度")]),t._v(" "),_("li",[t._v("任务注册")]),t._v(" "),_("li",[t._v("拦截器")])]),t._v(" "),_("h2",{attrs:{id:"中间件和插件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#中间件和插件"}},[t._v("#")]),t._v(" 中间件和插件")]),t._v(" "),_("h2",{attrs:{id:"参考资料"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),_("ul",[_("li",[t._v("组件化思想\n"),_("ul",[_("li",[_("a",{attrs:{href:"https://mp.weixin.qq.com/s/j4kbAjmEGJMn2FIQryXhoQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("聊聊如何设计组件"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://juejin.im/post/6844903767108747278",target:"_blank",rel:"noopener noreferrer"}},[t._v("[译] 前端组件设计原则"),_("OutboundLink")],1)])])]),t._v(" "),_("li",[_("a",{attrs:{href:""}},[t._v("左耳")])]),t._v(" "),_("li",[t._v("《重构现有代码的设计》")]),t._v(" "),_("li",[_("a",{attrs:{href:"https://juejin.im/book/6844733790204461070/section/6844733790246404109",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 设计模式核⼼原理与应⽤实践"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://juejin.im/post/6844903833173245965#heading-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端 IOC 思想简单实践"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://juejin.im/post/6887689159918485511?utm_source=gold_browser_extension#heading-14",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用这些思路与技巧，我读懂了多个优秀的开源项目"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIzOTU0NTQ0MA==&action=getalbum&album_id=1442497572832346113&scene=173&from_msgid=2247498117&from_itemidx=1&count=10#wechat_redirect&scene=178&subscene=&sessionid=svr_db5bea1da1f&enterid=1603238869",target:"_blank",rel:"noopener noreferrer"}},[t._v("阿里技术——架构"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://book.douban.com/subject/25844633/",target:"_blank",rel:"noopener noreferrer"}},[t._v("实现领域驱动设计"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://github.com/VaughnVernon/IDDD_Samples",target:"_blank",rel:"noopener noreferrer"}},[t._v("IDDD_Samples"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://mp.weixin.qq.com/s/LSOtald-laf29su_qN4luA",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端开发与架构师"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://github.com/sobird/mvvm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Model-View-ViewModel 简单实现"),_("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=r.exports}}]);