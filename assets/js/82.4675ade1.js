(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{1384:function(t,s,a){"use strict";a.r(s);var e=a(44),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"前端工程化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端工程化"}},[t._v("#")]),t._v(" 前端工程化")]),t._v(" "),e("p",[t._v("目前来说，Web 业务日益复杂化和多元化，前端开发已经由以 WebPage 模式为主转变为以 WebApp 模式为主了。现在随便找个前端项目，都已经不是过去的拼个页面+搞几个 jQuery 插件就能完成的了。工程复杂了就会产生许多问题，比如：如何进行高效的多人协作？如何保证项目的可维护性？如何提高项目的开发质量？...")]),t._v(" "),e("p",[t._v("前端工程化是前端架构中重要的一环，主要就是为了解决上述大部分问题的。而前端工程本质上是软件工程的一种，因此我们应该从软件工程的角度来研究前端工程。那么前端工程化需要考虑哪些因素？前端工程化主要应该从模块化、组件化、规范化、自动化四个方面来思考，下面一一展开。")]),t._v(" "),e("p",[t._v("学习前端工程化的目的在运用，在于实践，要逐步养成运用工程化思想的好习惯。")]),t._v(" "),e("h2",{attrs:{id:"模块化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[t._v("#")]),t._v(" 模块化")]),t._v(" "),e("p",[t._v("简单来说，模块化就是将一个大文件拆分成相互依赖的小文件，再进行统一的拼装和加载。只有这样，才有多人协作的可能。")]),t._v(" "),e("h3",{attrs:{id:"js-的模块化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-的模块化"}},[t._v("#")]),t._v(" JS 的模块化")]),t._v(" "),e("p",[t._v("在 ES6 之前，JavaScript 一直没有模块系统，这对开发大型复杂的前端工程造成了巨大的障碍。对此社区制定了一些模块加载方案，如 CommonJS、AMD 和 CMD 等，某些框架也会有自己模块系统，比如 Angular1.x。")]),t._v(" "),e("p",[t._v("现在 ES6 已经在语言层面上规定了模块系统，完全可以取代现有的 CommonJS 和 AMD 规范，而且使用起来相当简洁，并且有静态加载的特性。")]),t._v(" "),e("p",[t._v("规范确定了，然后就是模块的打包和加载问题：")]),t._v(" "),e("ol",[e("li",[t._v("用 Webpack+Babel 将所有模块打包成一个文件同步加载，也可以打成多个 chunk 异步加载；")]),t._v(" "),e("li",[t._v("用 SystemJS+Babel 主要是分模块异步加载；")]),t._v(" "),e("li",[t._v("用浏览器的 "),e("code",[t._v('<script type="module">')]),t._v("加载目前 Webpack 远比 SystemJS 流行。")])]),t._v(" "),e("h3",{attrs:{id:"css-的模块化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-的模块化"}},[t._v("#")]),t._v(" CSS 的模块化")]),t._v(" "),e("p",[t._v("虽然 SASS、LESS、Stylus 等预处理器实现了 CSS 的文件拆分，但没有解决 CSS 模块化的一个重要问题：选择器的全局污染问题。")]),t._v(" "),e("p",[t._v("**按道理，一个模块化的文件应该要隐藏内部作用域，只暴露少量接口给使用者。**而按照目前预处理器的方式，导入一个 CSS 模块后，已存在的样式有被覆盖的风险。虽然重写样式是 CSS 的一个优势，"),e("strong",[t._v("但这并不利于多人协作")]),t._v("。")]),t._v(" "),e("p",[t._v("为了避免全局选择器的冲突，各厂都制定了自己的 CSS 命名风格：")]),t._v(" "),e("ul",[e("li",[t._v("BEM 风格；")]),t._v(" "),e("li",[t._v("Bootstrap 风格；")]),t._v(" "),e("li",[t._v("Semantic UI 风格；\n但这毕竟是弱约束。选择器随着项目的增长变得越多越复杂，然后项目组里再来个新人带入自己的风格，就更加混乱了。")])]),t._v(" "),e("p",[t._v("所以我很赞同这句话：")]),t._v(" "),e("blockquote",[e("p",[t._v("与其费尽心思地告诉别人要遵守某种规则，以规避某种痛苦，倒不如从工具层面就消灭这种痛苦。")])]),t._v(" "),e("p",[t._v("从工具层面，社区又创造出 Shadow DOM、CSS in JS 和 CSS Modules 三种解决方案。")]),t._v(" "),e("ul",[e("li",[t._v("Shadow DOM 是 WebComponents 的标准。它能解决全局污染问题，但目前很多浏览器不兼容，对我们来说还很久远；")]),t._v(" "),e("li",[t._v("CSS in JS 是彻底抛弃 CSS，使用 JS 或 JSON 来写样式。这种方法很激进，不能利用现有的 CSS 技术，而且处理伪类等问题比较困难")]),t._v(" "),e("li",[t._v("CSS Modules 仍然使用 CSS，只是让 JS 来管理依赖。它能够最大化地结合 CSS 生态和 JS 模块化能力，目前来看是最好的解决方案。"),e("strong",[t._v("Vue 的 scoped style 也算是一种。")])])]),t._v(" "),e("h3",{attrs:{id:"资源的模块化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资源的模块化"}},[t._v("#")]),t._v(" 资源的模块化")]),t._v(" "),e("p",[t._v("Webpack 的强大之处不仅仅在于它统一了 JS 的各种模块系统，取代了 Browserify、RequireJS、SeaJS 的工作。更重要的是它的万能模块加载理念，即所有的资源都可以且也应该模块化。")]),t._v(" "),e("p",[t._v("资源模块化后，有三个好处：")]),t._v(" "),e("ul",[e("li",[t._v("依赖关系单一化。所有 CSS 和图片等资源的依赖关系统一走 JS 路线，无需额外处理 CSS 预处理器的依赖关系，也不需处理代码迁移时的图片合并、字体图片等路径问题；")]),t._v(" "),e("li",[t._v("资源处理集成化。现在可以用 loader 对各种资源做各种事情，比如复杂的 vue-loader 等等。")]),t._v(" "),e("li",[t._v("项目结构清晰化。使用 Webpack 后，你的项目结构总可以表示成这样的函数：\n"),e("code",[t._v("dest = webpack(src, config)")])])]),t._v(" "),e("h3",{attrs:{id:"webpack-sourcemap-的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack-sourcemap-的作用"}},[t._v("#")]),t._v(" Webpack sourceMap 的作用")]),t._v(" "),e("h2",{attrs:{id:"组件化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[t._v("#")]),t._v(" 组件化")]),t._v(" "),e("p",[t._v("首先，组件化 ≠ 模块化。好多人对这两个概念有些混淆。")]),t._v(" "),e("p",[t._v("模块化只是在文件层面上，对代码或资源的拆分；而组件化是在设计层面上，对 UI（用户界面）的拆分。")]),t._v(" "),e("p",[t._v("从 UI 拆分下来的"),e("strong",[t._v("每个包含模板(HTML)+样式(CSS)+逻辑(JS)功能完备的结构单元")]),t._v("（比如 .vue 文件），我们称之为组件。")]),t._v(" "),e("p",[t._v("其实，组件化更重要的是一种"),e("strong",[t._v("分治思想")]),t._v("。")]),t._v(" "),e("blockquote",[e("p",[t._v("Keep Simple. Everything can be a component")])]),t._v(" "),e("p",[t._v("这句话就是说页面上所有的东西都是组件。页面是个大型组件，可以拆成若干个中型组件，然后中型组件还可以再拆，拆成若干个小型组件，小型组件也可以再拆，直到拆成 DOM 元素为止。DOM 元素可以看成是浏览器自身的组件，作为组件的基本单元。"),e("u",[t._v("传统前端框架/类库的思想是先组织 DOM，然后把某些可复用的逻辑封装成组件来操作 DOM，是 DOM 优先；而组件化框架/类库的思想是先来构思组件，然后用 DOM 这种基本单元结合相应逻辑来实现组件，是组件优先。这是两者本质的区别。")])]),t._v(" "),e("p",[t._v("其次，组件化实际上是一种按照模板(HTML)+样式(CSS)+逻辑(JS)三位一体的形式对"),e("strong",[t._v("面向对象的进一步抽象。")])]),t._v(" "),e("p",[t._v("所以我们除了封装组件本身，还要合理处理组件之间的关系，比如（逻辑）继承、（样式）扩展、（模板）嵌套和包含等，这些关系都可以归为"),e("strong",[t._v("依赖")]),t._v("。")]),t._v(" "),e("p",[t._v("其实组件化不是什么新鲜的东西，以前的客户端框架，像 WinForm、WPF、Android 等，它们从诞生的那天起就是组件化的。而前端领域发展曲折，是从展示页面为主的 WebPage 模式走过来的，近两年才从客户端框架经验中引入了组件化思想。"),e("strong",[t._v("其实我们很多前端工程化的问题都可以从客户端那里寻求解决方案")]),t._v("。")]),t._v(" "),e("p",[t._v("目前市面上的组件化框架很多，主要的有 Vue、React、Angular。")]),t._v(" "),e("h2",{attrs:{id:"规范化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#规范化"}},[t._v("#")]),t._v(" 规范化")]),t._v(" "),e("p",[e("strong",[t._v("模块化和组件化确定了开发模型，而这些东西的实现就需要规范去落实。")])]),t._v(" "),e("p",[t._v("规范化其实是工程化中很重要的一个部分，项目初期规范制定的好坏会直接影响到后期的开发质量。")]),t._v(" "),e("p",[t._v("我能想到的有以下一些内容：")]),t._v(" "),e("ul",[e("li",[t._v("目录结构的制定")]),t._v(" "),e("li",[t._v("编码规范")]),t._v(" "),e("li",[t._v("前后端接口规范")]),t._v(" "),e("li",[t._v("文档规范")]),t._v(" "),e("li",[t._v("组件管理")]),t._v(" "),e("li",[t._v("Git 分支管理")]),t._v(" "),e("li",[t._v("Commit 描述规范")]),t._v(" "),e("li",[e("strong",[t._v("定期 CodeReview")])]),t._v(" "),e("li",[t._v("视觉图标规范")]),t._v(" "),e("li",[t._v("...")])]),t._v(" "),e("p",[t._v("其中编码规范最好采取 ESLint 和 StyleLint 等强制措施，配置 git hooks 可以实现 Lint 不过不能提交代码等机制，因为人是靠不住的。")]),t._v(" "),e("h3",{attrs:{id:"使用-eslint-prettier-统一代码风格"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-eslint-prettier-统一代码风格"}},[t._v("#")]),t._v(" 使用 ESLint + Prettier 统一代码风格")]),t._v(" "),e("p",[e("img",{attrs:{src:a(472),alt:"使用 ESLint + Prettier 统一代码风格"}})]),t._v(" "),e("blockquote",[e("p",[t._v("参考资料：https://juejin.im/post/5b27a326e51d45588a7dac57")])]),t._v(" "),e("h4",{attrs:{id:"三、配置-husky-和-lint-staged"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、配置-husky-和-lint-staged"}},[t._v("#")]),t._v(" 三、配置 husky 和 lint-staged")]),t._v(" "),e("p",[t._v("由于直接使用 prettier 进行代码格式化仍存在一些弊端，例如：")]),t._v(" "),e("p",[t._v("一次性对所有文件进行格式化，如果是项目中途加入 prettier，会对一些早已经编写完成的代码进行格式化，可能会造成冲突或者一些不可预知的问题，降低项目稳定性。")]),t._v(" "),e("p",[t._v("每次都要键入 npm run format 进行代码格式化，多了额外的操作，开发体验不良好。")]),t._v(" "),e("p",[t._v("故此，我们可以修改代码格式化的时机，仅对本次提交的代码进行格式化，并且在代码提交之前进行格式化，确保存入仓库的代码都是格式化后的良好的代码。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("husky 是一款可以帮助我们使用 git hooks 的第三方库，可以根据 package.json 文件里定义的钩子和钩子执行的命令将要执行的操作写对应的钩子脚本里。")])]),t._v(" "),e("li",[e("p",[t._v("lint-staged，官方说明是一款可以对 git 提交的代码使用 linter 的第三方库，其依赖于 husky 使用 git hooks。此处我们不仅仅可以利用其调用 linters，还可以调用 prettier 对代码进行格式化。")])])]),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"husky"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pre-commit"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lint-staged"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pre-push"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yarn test:unit"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint-staged"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"src/**/*.{vue,ts,scss}"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prettier --write"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yarn lint"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])]),e("h2",{attrs:{id:"自动化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动化"}},[t._v("#")]),t._v(" 自动化")]),t._v(" "),e("p",[t._v("作为一个优秀的程序员，需要秉持的一个理念是：")]),t._v(" "),e("blockquote",[e("p",[t._v("任何简单机械的重复劳动都应该让机器去完成。")])]),t._v(" "),e("p",[t._v("所以，前端工程化的很多脏活累活都应该交给自动化工具来完成。")]),t._v(" "),e("h3",{attrs:{id:"图标合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#图标合并"}},[t._v("#")]),t._v(" 图标合并")]),t._v(" "),e("ul",[e("li",[t._v("不要再用 PS 拼雪碧图了，统一走 Webpack 吧；")]),t._v(" "),e("li",[t._v("不要再用 Icomoon 了，统一走 Webpack 吧。")])]),t._v(" "),e("h3",{attrs:{id:"利用-require-context-遍历目录所有图片"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#利用-require-context-遍历目录所有图片"}},[t._v("#")]),t._v(" 利用 require.context 遍历目录所有图片")]),t._v(" "),e("h3",{attrs:{id:"脚本自动加载-vue-全局组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#脚本自动加载-vue-全局组件"}},[t._v("#")]),t._v(" 脚本自动加载 Vue 全局组件")]),t._v(" "),e("h3",{attrs:{id:"webpack-require-context-自动化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack-require-context-自动化"}},[t._v("#")]),t._v(" webpack require.context() 自动化")]),t._v(" "),e("p",[t._v("你还可以通过 require.context() 函数来创建自己的 context。")]),t._v(" "),e("p",[t._v("可以给这个函数传入三个参数：一个要搜索的目录，一个标记表示是否还搜索其子目录， 以及一个匹配文件的正则表达式。")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("require"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("context")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("directory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("useSubdirectories "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regExp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^\\.\\//")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("demo")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("require"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("context")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./test"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\.test\\.js$/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// （创建出）一个 context，其中文件来自 test 目录，request 以 `.test.js` 结尾。")]),t._v("\nrequire"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("context")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"../"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\.stories\\.js$/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// （创建出）一个 context，其中所有文件都来自父文件夹及其所有子级文件夹，request 以 `.stories.js` 结尾。")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("h3",{attrs:{id:"nodejs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nodejs"}},[t._v("#")]),t._v(" nodejs")]),t._v(" "),e("p",[t._v("文件下既有 ts 文件，又有 js 文件，所以需要针对这些文件打包时要进行对应的配置信息，之前是一个个手动敲的，我觉得这些完全可以写个工具自动生成")]),t._v(" "),e("p",[t._v("扫描文件夹 -》生成 rollup.config.js =》npm script")]),t._v(" "),e("p",[t._v("扫描文件夹，可以用 nodejs 读取文件夹的 api，和 webpack require.context 类似，但是比 require.context 强大，生成 rollup.config.js 其实也很简单，就是动态生成 js 字符串，然后写入到 js 文件里面去就 ok 了")]),t._v(" "),e("h3",{attrs:{id:"持续集成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#持续集成"}},[t._v("#")]),t._v(" 持续集成")]),t._v(" "),e("h3",{attrs:{id:"自动化构建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动化构建"}},[t._v("#")]),t._v(" 自动化构建")]),t._v(" "),e("h3",{attrs:{id:"自动化部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动化部署"}},[t._v("#")]),t._v(" 自动化部署")]),t._v(" "),e("h3",{attrs:{id:"自动化测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动化测试"}},[t._v("#")]),t._v(" 自动化测试")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://jecyu.github.io/Fe-Auto-Testing/",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端自动化测试"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"项目实战"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目实战"}},[t._v("#")]),t._v(" 项目实战")]),t._v(" "),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.zhihu.com/question/24558375",target:"_blank",rel:"noopener noreferrer"}},[t._v("谁能介绍下 web 前端工程化？"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.im/post/5b79a52651882543025ac6d7#heading-7",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 项目使用 eslint + prettier 规范代码风格"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=r.exports},472:function(t,s,a){t.exports=a.p+"assets/img/codeFormat.93f336c1.png"}}]);