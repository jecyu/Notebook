(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{1507:function(v,_,t){"use strict";t.r(_);var a=t(44),e=Object(a.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"编程套路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程套路"}},[v._v("#")]),v._v(" 编程套路")]),v._v(" "),a("h2",{attrs:{id:"面向过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向过程"}},[v._v("#")]),v._v(" 面向过程")]),v._v(" "),a("ul",[a("li",[v._v("C 语言")])]),v._v(" "),a("h2",{attrs:{id:"面向对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[v._v("#")]),v._v(" 面向对象")]),v._v(" "),a("p",[v._v("在 OO 开发中，至关重要的能力是"),a("u",[v._v("熟练地为软件对象分配职责。")])]),v._v(" "),a("p",[v._v("为什么？因为分配职责是必须要执行的一项活动（无论是画 UML 图时还是进行程序设计，都要为软件对象分配职责），并且它对软件构件的健壮性、可维护性和可重复性具有重要影响。（简单来说，健壮性针对类的继承，无需改变父类、可重复性针对类的实例化、可维护性只需维护类）")]),v._v(" "),a("p",[v._v("在实际项目中，开发人员可能没有机会进行其他的建模活动，而只能完成“仓促编码”的开发过程。即使在这种情况下，权衡和抉择后给对象分配职责是必不可少的。")]),v._v(" "),a("p",[v._v("面向对象不仅限于实现面向对象的语言（Java、C++）和工具（UML），关键要掌握思想。例如系统项目的文件如何面向对象分类，职责分明。")]),v._v(" "),a("p",[v._v("举个例子，如果给一个人安排很多与他不相关的本来别人做的工作，那么他的工作效率会大打折扣。")]),v._v(" "),a("h3",{attrs:{id:"ood-的原则和模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ood-的原则和模式"}},[v._v("#")]),v._v(" OOD 的原则和模式")]),v._v(" "),a("p",[v._v("应该如何为对象类分配职责（responsibility）？对象之间应该如何协作？什么样的类应该作什么样的事情？这些都是系统设计中的关键问题，如何进行职责驱动设计（responsibility-driven design）。")]),v._v(" "),a("h3",{attrs:{id:"用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用例"}},[v._v("#")]),v._v(" 用例")]),v._v(" "),a("p",[v._v("OOD（以及所有软件设计）与作为其先决活动的"),a("code",[v._v("需求分析")]),v._v("（requirement analysis）具有紧密联系，而在需求分析中通常包含用例（use case）的编写。")]),v._v(" "),a("h3",{attrs:{id:"迭代开发、敏捷建模和敏捷-up"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代开发、敏捷建模和敏捷-up"}},[v._v("#")]),v._v(" 迭代开发、敏捷建模和敏捷 UP")]),v._v(" "),a("p",[v._v("假设从需求到实现会涉及众多可能的活动，那么开发人员或团队应该如何进行下去呢？**需求和 OOA/D 需求某种开发过程的语境中进行描述和实践。**在这种情况下，使用著名的 "),a("code",[v._v("统一过程")]),v._v("（Unified Process）的"),a("code",[v._v("敏捷")]),v._v("（轻量的、灵活的）方法作为"),a("code",[v._v("迭代开发过程")]),v._v("（iterative development process）的样例。")]),v._v(" "),a("h3",{attrs:{id:"什么是分析和设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是分析和设计"}},[v._v("#")]),v._v(" 什么是分析和设计")]),v._v(" "),a("p",[a("strong",[v._v("分析（analysis）")]),v._v(" "),a("u",[v._v("强调的是对问题和需求的调查研究，而不是解决方案。")]),v._v("例如，如果需要一个新的在线交易系统，那么，应该如何使用它？它应该具有哪些功能？")]),v._v(" "),a("p",[v._v("“分析”一词含义广泛，最好加以"),a("code",[v._v("限制")]),v._v("，如"),a("code",[v._v("需求分析")]),v._v("（对需求的调查研究）或"),a("code",[v._v("面向对象")]),v._v("分析（对领域对象的调查研究）。")]),v._v(" "),a("p",[v._v("**设计（design）**强调的是"),a("u",[v._v("满足需求的概念上的解决方案")]),v._v("（在软件方面和硬件方面）。例如，对数据库方案和软件对象的描述。设计思想通常排斥底层或“显而易见”的细节（对于预期消费者来说是显而易见的）。最终，设计可以实现，而实现（如代码）则表达了真实和完整的设计。就好像理解需求后，寻找能够走通整个程序设计的链路方案，最后再进行编码实现。")]),v._v(" "),a("p",[v._v("与“分析”相同，对“设计”一词最好也加以限制，如面向对象设计或数据库设计。")]),v._v(" "),a("p",[v._v("有益的分析和设计可以概括为：做正确的事（分析）和正确地做事（设计）。")]),v._v(" "),a("h3",{attrs:{id:"什么是面向对象分析和设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是面向对象分析和设计"}},[v._v("#")]),v._v(" 什么是面向对象分析和设计")]),v._v(" "),a("p",[v._v("在"),a("strong",[v._v("面向对象分析")]),v._v("（object-oriented analysis）的过程中，强调的是"),a("u",[v._v("在问题"),a("code",[v._v("领域")]),v._v("内"),a("code",[v._v("发现")]),v._v("和"),a("code",[v._v("描述")]),v._v("对象（或概念）。")]),v._v("例如，在航班信息系统里包含飞机（Plane）、航班（Flight）和飞行员（Pilot）的概念。")]),v._v(" "),a("p",[v._v("在"),a("strong",[v._v("面向对象设计")]),v._v("（object-oriented design，简称对象设计）过程中，强调的是"),a("u",[a("code",[v._v("定义")]),v._v("软件对象以及它们如何"),a("code",[v._v("协作")]),v._v("以实现需求。")]),v._v("例如，软件对象 Plane 可以有 tailNumber 属性和 getFlighHistory 方法。")]),v._v(" "),a("p",[a("img",{attrs:{src:t(817),alt:"OOA/D"}})]),v._v(" "),a("h3",{attrs:{id:"简单示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单示例"}},[v._v("#")]),v._v(" 简单示例")]),v._v(" "),a("p",[v._v("针对上面提到的分析和设计以及面向对象分析与设计，使用一个简单的示例——“骰子游戏”，软件模拟游戏者抛掷两个骰子，如果总点数是7 则赢得优秀，否则为输。")]),v._v(" "),a("p",[a("img",{attrs:{src:t(818),alt:""}})]),v._v(" "),a("h4",{attrs:{id:"定义用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义用例"}},[v._v("#")]),v._v(" 定义用例")]),v._v(" "),a("p",[v._v("需求分析可能包括人们如何使用应用的"),a("code",[v._v("情节")]),v._v("或"),a("code",[v._v("场景")]),v._v("，这些情节或场景可以被编写成"),a("strong",[v._v("用例")]),v._v("（use case）。")]),v._v(" "),a("p",[v._v("用例不是面向对象复制品，而只是对情节的记录。但用例谁需求分析中的一种常用工具。例如，下面是一个简单的骰子游戏的用例。")]),v._v(" "),a("p",[v._v("骰子游戏：游戏者请求掷骰子。系统展示结果：如果骰子的总点数是 7，则游戏者赢；否则游戏者输。")]),v._v(" "),a("h4",{attrs:{id:"定义领域模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义领域模型"}},[v._v("#")]),v._v(" 定义领域模型")]),v._v(" "),a("p",[v._v("面向对象分析关注从"),a("code",[v._v("对象的角度领域描述")]),v._v("。面向对象分析需要鉴别重要的概念、属性和关联。")]),v._v(" "),a("p",[v._v("面向对象分析的结果可以表示为"),a("code",[v._v("领域模型")]),v._v("（domain model），在领域模型中展示重要的"),a("code",[v._v("领域概念")]),v._v("或"),a("code",[v._v("对象")]),v._v("。")]),v._v(" "),a("p",[a("img",{attrs:{src:t(334),alt:""}})]),v._v(" "),a("p",[v._v("如图显示领域模型的一部分。这一模型描述了重要的概念（Player、Die 和 DieGame）及其关联的属性。")]),v._v(" "),a("p",[v._v("需要注意的是，领域模型并不是对软件对象的描述，"),a("u",[v._v("它使"),a("code",[v._v("真实世界领域")]),v._v("中的概念和想象可视化。")]),v._v("因此，它也被称为"),a("strong",[v._v("概念对象模型")]),v._v("（conceptual object model）。")]),v._v(" "),a("h4",{attrs:{id:"分配对象职责并绘制交互图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分配对象职责并绘制交互图"}},[v._v("#")]),v._v(" 分配对象职责并绘制交互图")]),v._v(" "),a("p",[v._v("面向对象设计关注"),a("code",[v._v("软件对象")]),v._v("的定义——它们的职责和协作。"),a("strong",[v._v("顺序图")]),v._v("（sequence diagram，UML 的一种交互图）是描述协作的常见表示法。它展示出"),a("u",[v._v("软件对象之间的消息流，和由消息引起的方法调用。")])]),v._v(" "),a("p",[a("img",{attrs:{src:t(819),alt:""}})]),v._v(" "),a("p",[v._v("上图描述了骰子游戏的 OO 软件设计，即给 DiceGame 和 Die 类的实例发送消息。")]),v._v(" "),a("p",[v._v("要注意的是，尽管在真实世界中是由游戏者掷出骰子，但在软件设计中是却由 DiceGame 对象“掷出”骰子（"),a("u",[v._v("即发送消息给 Die 对象）。软件对象设计和程序可从真实世界领域中获取灵感，但它们并不是对真实世界的直接建模或模拟。")])]),v._v(" "),a("h4",{attrs:{id:"定义设计类图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义设计类图"}},[v._v("#")]),v._v(" 定义设计类图")]),v._v(" "),a("p",[v._v("除了在交互图中显示"),a("code",[v._v("对象协作")]),v._v("的"),a("code",[v._v("动态视图")]),v._v("外，还可以用"),a("strong",[v._v("设计类图")]),v._v("（design class diagram）来有效地表示类定义的"),a("code",[v._v("静态视图")]),v._v("。这样可以描述类的属性和方法。")]),v._v(" "),a("p",[v._v("例如，在骰子游戏中，"),a("u",[v._v("通过观察顺序图可以导出下图所示的局部设计类图。")]),v._v("因为向 DiceGame 对象发送了 play 消息，所以 DiceGame 类需要 play 方法响应请求；同理，Die 类需要 roll 和 getFaceValue 方法。")]),v._v(" "),a("p",[a("img",{attrs:{src:t(335),alt:""}})]),v._v(" "),a("p",[a("u",[v._v("与领域模型表示的是真实世界的类，设计类图表示的是软件类。")])]),v._v(" "),a("p",[v._v("要注意的是，尽管类设计类图不同于领域模型，但是其中的某些类名和内容还是相似的。从这一方面讲，OO 设计和语言能够缩小软件构件和我们所设想的领域模型之间的差距，即实现"),a("strong",[v._v("低表示差距")]),v._v("（lower representational gap）。")]),v._v(" "),a("h4",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[v._v("#")]),v._v(" 小结")]),v._v(" "),a("p",[v._v("面向对象分析：")]),v._v(" "),a("ul",[a("li",[v._v("定义用例")]),v._v(" "),a("li",[v._v("定义领域模型\n面向对象设计")]),v._v(" "),a("li",[v._v("定义交互图")]),v._v(" "),a("li",[v._v("定义类图\n")])]),v._v(" "),a("h3",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[v._v("#")]),v._v(" 基本概念")]),v._v(" "),a("h4",{attrs:{id:"封装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[v._v("#")]),v._v(" 封装")]),v._v(" "),a("p",[v._v("C# 使用访问修饰符 public、protected、internal、protected internal、private 决定类或类成员的可见性，尽可能封装内部实现。")]),v._v(" "),a("h2",{attrs:{id:"迭代、进化和敏捷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代、进化和敏捷"}},[v._v("#")]),v._v(" 迭代、进化和敏捷")]),v._v(" "),a("p",[v._v("相对于顺序或“瀑布”（waterfall）生命周期（提倡编程之前就预先完成需求和步骤），"),a("strong",[v._v("迭代和进化式开发")]),v._v("（iterative and evolutionary）对部分系统及早地引入了编程和测试，并重复这一循环。这方式通常会在还没有详细定义所有需求的情况下假设开发开始，同时使用反馈和改写不断明确需求和设计（成功率高）。")]),v._v(" "),a("p",[v._v("迭代开发是 OOA/D 成为最佳实践的核心。")]),v._v(" "),a("h3",{attrs:{id:"什么是-up？其他方法是否有补充？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-up？其他方法是否有补充？"}},[v._v("#")]),v._v(" 什么是 UP？其他方法是否有补充？")]),v._v(" "),a("p",[v._v("软件开发过程（software development process）描述了构造、部署以及维护软件的方式。"),a("strong",[v._v("统一过程")]),v._v("（Unified Process，UP）已经成为一种流行的构造"),a("code",[v._v("面向对象系统")]),v._v("的"),a("code",[v._v("迭代软件")]),v._v("开发过程。")]),v._v(" "),a("p",[v._v("其他方法：")]),v._v(" "),a("ul",[a("li",[v._v("极限编程（Extreme Programming，XP）\n"),a("ul",[a("li",[v._v("测试驱动开发（test-driven development）")]),v._v(" "),a("li",[v._v("重构（refactoring）")]),v._v(" "),a("li",[v._v("持续集成（continuous integration）")])])]),v._v(" "),a("li",[v._v("Scrum")])]),v._v(" "),a("h3",{attrs:{id:"什么是迭代和进化式开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是迭代和进化式开发"}},[v._v("#")]),v._v(" 什么是迭代和进化式开发")]),v._v(" "),a("p",[v._v("迭代和增量式开发（iterative and incremental development）")]),v._v(" "),a("p",[v._v("“少许”超前设计是使用粗略和快速的 UML 可视化建模来完成的。")]),v._v(" "),a("p",[v._v("迭代的输出不是实验性或将丢弃的原型，迭代开发也不是构造原型。与之相反，其输出是最终系统的产品子集。")]),v._v(" "),a("h4",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[v._v("#")]),v._v(" 优点")]),v._v(" "),a("ul",[a("li",[v._v("早期反馈、用户参与和调整，会产生更接近涉众真实需求的精化系统。")])]),v._v(" "),a("h4",{attrs:{id:"一次迭代的持续时间和时间定量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一次迭代的持续时间和时间定量"}},[v._v("#")]),v._v(" 一次迭代的持续时间和时间定量")]),v._v(" "),a("p",[v._v("大部分迭代时间在 2 ～ 6 周之间。小步骤、快速反馈和调整和迭代开发的主要思想，迭代时间过长会破坏迭代开发的核心动机并增加项目风险。仅一周的迭代时间不足以获得有意义的产出和反馈；若迭代时间大于 6 周，则复杂性变得不可控制，反馈将延迟。时间定量超长的迭代不符合迭代开发的观点。短时迭代为上。")]),v._v(" "),a("p",[v._v("迭代的一个关键思想是"),a("strong",[v._v("时间定量")]),v._v("（timeboxed），或时长固定。")]),v._v(" "),a("h3",{attrs:{id:"敏捷宣言和原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#敏捷宣言和原则"}},[v._v("#")]),v._v(" 敏捷宣言和原则")]),v._v(" "),a("p",[v._v("敏捷宣言")]),v._v(" "),a("ul",[a("li",[v._v("个体和迭代，超越过程和工具")]),v._v(" "),a("li",[v._v("能工作的软件，超越完整的文档")]),v._v(" "),a("li",[v._v("客户协作，超越合同谈判")]),v._v(" "),a("li",[v._v("响应变更，超越履行计划")])]),v._v(" "),a("p",[v._v("原则：")]),v._v(" "),a("ol",[a("li",[v._v("优先级最高的是，通过早期和持续交付有价值的软件来满足客户。")]),v._v(" "),a("li",[v._v("欢迎变更，即使在开发的后期提出。敏捷过程为客户的竞争优势而控制变更。")]),v._v(" "),a("li",[v._v("以两周到两月为周期，频繁地交付可运行的软件，首推较短的时间定量。")]),v._v(" "),a("li",[v._v("在整个项目过程中，每一天开发人员都要和业务人员合作。")]),v._v(" "),a("li",[v._v("由个体推动项目的建设，为个体提供所需要的环境、支持和信任。")]),v._v(" "),a("li",[v._v("在开发团队中或开发团队间传递信息的最为有效和高效的方法是面对面交谈。")]),v._v(" "),a("li",[v._v("衡量进展的重要尺度是可运行的软件。")]),v._v(" "),a("li",[v._v("敏捷过程提倡可持续的开发。")]),v._v(" "),a("li",[v._v("发起人、开发者和用户应该步调一致。")]),v._v(" "),a("li",[v._v("不断地关注技术上优越的设计会提高敏捷性。")]),v._v(" "),a("li",[v._v("简洁是最重要的，简洁就睡尽量减少工作量的艺术。")]),v._v(" "),a("li",[v._v("最佳的架构、需求和设计来自于自组织的团队。")]),v._v(" "),a("li",[v._v("团队要定期反省如何使工作更有效、然后相应地调整行为。")])]),v._v(" "),a("h3",{attrs:{id:"敏捷建模"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#敏捷建模"}},[v._v("#")]),v._v(" 敏捷建模")]),v._v(" "),a("ul",[a("li",[v._v("并行地创建模型。例如，在一块白板上勾勒 UML 动态视图的交互图，同时在另一白板上勾画补充性的 UML 静态视图的类图。同时开发这两种模型（视图），并不断交替。")]),v._v(" "),a("li",[v._v("要知道所有模型都可能是不准确的，最终代码或设计会与模型有差异，甚至具有极大的差异。只有测试过的代码才能证实真正的设计；先前绘制的模型图都是不完整的，最好只是将其视为一次探索。")])]),v._v(" "),a("h3",{attrs:{id:"敏捷-up"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#敏捷-up"}},[v._v("#")]),v._v(" 敏捷 Up")]),v._v(" "),a("ul",[a("li",[v._v("对于整个项目不应有详细的计划。应该制定估计结束日期和主要里程碑的高阶计划（称为"),a("code",[v._v("阶段计划")]),v._v("），但不要对这些里程碑详细定义细粒度的步骤。只能预先对一个迭代制定更为详细的计划（称为"),a("code",[v._v("迭代计划")]),v._v("）。详细计划是由一次次迭代的调整而完成的。")])]),v._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[v._v("#")]),v._v(" 参考资料")]),v._v(" "),a("ul",[a("li",[v._v("《UML 和模式应用》")]),v._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/pROCXZNZ7RKeYDlDUJng_Q",target:"_blank",rel:"noopener noreferrer"}},[v._v("领域驱动设计在前端中的应用"),a("OutboundLink")],1),v._v("]")])])])}),[],!1,null,null,null);_.default=e.exports},334:function(v,_,t){v.exports=t.p+"assets/img/2020-06-22-13-40-45-domain-model.ea732f4a.png"},335:function(v,_,t){v.exports=t.p+"assets/img/2020-06-22-14-07-25-class-diagram.68bd906a.png"},817:function(v,_,t){v.exports=t.p+"assets/img/2020-06-22-11-09-07-ood-01.4def3aaa.png"},818:function(v,_,t){v.exports=t.p+"assets/img/D-02.2f31cc7b.png"},819:function(v,_,t){v.exports=t.p+"assets/img/2020-06-22-13-53-16-sequence.73b8a3cf.png"}}]);