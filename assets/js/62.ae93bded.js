(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{1562:function(t,s,a){"use strict";a.r(s);var e=a(44),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"从现在起，搞懂-vue-router-源码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从现在起，搞懂-vue-router-源码"}},[t._v("#")]),t._v(" 从现在起，搞懂 Vue-Router 源码")]),t._v(" "),e("p",[t._v("头脑风暴")]),t._v(" "),e("ul",[e("li",[t._v("源码分析的文章很多，但是没看到有多少篇是把调试过程也说上来的。")]),t._v(" "),e("li",[t._v("为什么读（业务场景模拟或真实场景、现在读 vue-router 还有用吗？vue3 出来了，有哪些影响）")]),t._v(" "),e("li",[t._v("如何读，怎样学习调试\n"),e("ul",[e("li",[t._v("业务代码调试（生产环境、开发环境）")]),t._v(" "),e("li",[t._v("在源码目录环境下调试")])])]),t._v(" "),e("li",[t._v("收获了什么知识（架构思想、工程化知识、性能化知识），看了源码之后写业务代码有什么不同、提升？")])]),t._v(" "),e("p",[t._v("读懂源码步骤：先大局了解（看源码目录和博客文章），然后从某个细节（比如你就想看看路由跳转那块代码）入手，再反过来按步骤 review 。")]),t._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("应用场景：任务下发模块的")]),t._v(" "),e("p",[t._v("前端路由与后端路由，这里可以进行改善处理。")]),t._v(" "),e("ul",[e("li",[t._v("为什么要使用 name，而不使用 path，因为 path 是绝对路径。")])]),t._v(" "),e("p",[t._v("避免踩更多的坑")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$router"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("go")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n只是返回上一个层级"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("vue 路由设置如下图，vue 中可以通过 path 和 name 进行跳转，path 是真正显示到浏览器地址栏上。假设当前路径为 rwxf/suggestion/，那么在该二级路由页面下通过 "),e("code",[t._v('router.push({name: "task-detail"})')]),t._v(" 进行跳转时，它不会跳转到 rwxf/suggestion/task-detail，而是会最先命中第一个匹配的路由，从而渲染它对应的组件视图1。")]),t._v(" "),e("p",[t._v("这是因为在路由跳转时，需要先获取匹配的路由信息，可以看下 vue （版本 2.5.）源码中的处理如下：")]),t._v(" "),e("p",[t._v("补充下，路由跳转有 paht 和 name 两种方式，我们通常都是使用 name 进行编程式路由跳转，这是因为 path 需要接受绝对路径不够灵活。")]),t._v(" "),e("p",[t._v("目标读者：")]),t._v(" "),e("h2",{attrs:{id:"前置知识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[t._v("#")]),t._v(" 前置知识")]),t._v(" "),e("h3",{attrs:{id:"前端路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端路由"}},[t._v("#")]),t._v(" 前端路由")]),t._v(" "),e("p",[t._v("有了 ajax 后，用户交互就不用每次都刷新页面，体验带来了极大的提升。")]),t._v(" "),e("p",[t._v("SPA 不单单在页面交互上做到了不刷新，而且在页面之间跳转也做到了不刷新。")]),t._v(" "),e("p",[t._v("前端路由其实只要解决两个问题：")]),t._v(" "),e("ul",[e("li",[t._v("在页面不刷新的前提下实现 url 变化")]),t._v(" "),e("li",[t._v("捕捉到 url 的变化，以便执行页面替换逻辑")])]),t._v(" "),e("h3",{attrs:{id:"实现方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现方式"}},[t._v("#")]),t._v(" 实现方式")]),t._v(" "),e("ul",[e("li",[t._v("hash")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(861),alt:""}})]),t._v(" "),e("p",[t._v("这种 #。后面 hash 值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求，也就不会刷新页面。另外每次 hash 值的变化，还会触发 hashchange 这个事件，通过这个事件我们就可以知道 hash 值发生了哪些变化。然后我们便可以"),e("strong",[t._v("监听 hashChange 来实现更新页面部分内容的操作：")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("funciton "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("matchAndUpdate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// todo 匹配 hash 做 dom 更新操作")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nwindow"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hashchange'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" matchAndUpdate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("ul",[e("li",[t._v("history：pushState 和 replaceState，通过这两个 API 可以改变 url 地址且不会发送请求。同时还有 popstate 事件。")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(862),alt:""}})]),t._v(" "),e("p",[t._v("但因为没有 # 号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面：")]),t._v(" "),e("h2",{attrs:{id:"vue-router-的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-的实现"}},[t._v("#")]),t._v(" Vue-Router 的实现")]),t._v(" "),e("p",[e("img",{attrs:{src:a(863),alt:""}})]),t._v(" "),e("ul",[e("li",[t._v("flow 类型检查")])]),t._v(" "),e("p",[t._v("走通整个路线，学习一些思想。")]),t._v(" "),e("h3",{attrs:{id:"如何调试呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何调试呢"}},[t._v("#")]),t._v(" 如何调试呢")]),t._v(" "),e("p",[t._v("可以下载源码调试，也可以直接开启 source-map 使用 node_module 进行调试。")]),t._v(" "),e("p",[t._v("写作目的：")]),t._v(" "),e("p",[t._v("头脑风暴：")]),t._v(" "),e("p",[t._v("关于看源码：")]),t._v(" "),e("p",[t._v("可以从知名的框架 vue、react 第一个 commit 看，了解它的简史。")]),t._v(" "),e("h2",{attrs:{id:"收获"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#收获"}},[t._v("#")]),t._v(" 收获")]),t._v(" "),e("h3",{attrs:{id:"版本发布"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本发布"}},[t._v("#")]),t._v(" 版本发布")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("yarn run release")]),t._v(" "),e("ul",[e("li",[t._v("Ensure tests are passing "),e("code",[t._v("yarn run test")])]),t._v(" "),e("li",[t._v("Build dist files "),e("code",[t._v("VERSION=<the_version> yarn run build")])]),t._v(" "),e("li",[t._v("Build changelog "),e("code",[t._v("yarn run changelog")])]),t._v(" "),e("li",[t._v("Commit dist files "),e("code",[t._v('git add dist CHANGELOG.md && git commit -m "[build $VERSION]"')])]),t._v(" "),e("li",[t._v('Publish a new version `npm version $VERSION --message "[release] $VERSION"')]),t._v(" "),e("li",[t._v("Push tags "),e("code",[t._v("git push origin refs/tags/v$VERSION && git push")])]),t._v(" "),e("li",[t._v("Publish to npm "),e("code",[t._v("npm publish")])])])])]),t._v(" "),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/temp/44.Vue资源集锦.html"}},[t._v("Vue资源集锦")])],1)])])}),[],!1,null,null,null);s.default=n.exports},861:function(t,s,a){t.exports=a.p+"assets/img/2020-11-01-22-18-42.c6872d7f.png"},862:function(t,s,a){t.exports=a.p+"assets/img/2020-11-01-22-19-30.9dfcbed3.png"},863:function(t,s,a){t.exports=a.p+"assets/img/2020-11-01-20-09-33.c3a3c61d.png"}}]);