(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{1471:function(t,a,s){"use strict";s.r(a);var e=s(44),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"ugui"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ugui"}},[t._v("#")]),t._v(" UGUI")]),t._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("其实 UGUI 跟 web 前端的 UI 组件库一样，很类似。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(343),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"ngui-和-ugui、gui"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ngui-和-ugui、gui"}},[t._v("#")]),t._v(" NGUI 和 UGUI、GUI")]),t._v(" "),e("p",[t._v("其中最老的应该是 GUI 了，它是 Unity3D 里自带的 UI，在 5.0 版本之前 Uniyt3D 自带的 UI 是很难用的，要用大量的代码（这个跟网页一样编写）来生成，而且能实现的效果也不是特别的丰富。虽说可以头铁硬写，但是其执行效率也不太理想。于是 "),e("code",[t._v("NGUI")]),t._v(" 插件就诞生了，可视化的操作，以及可以拖拽，十分的方便快捷。就算是不怎么懂美工也可以做一些漂亮的 UI 出来。5.0 版本之后 Unity3D 推出了 "),e("code",[t._v("UGUI")]),t._v("，设计思路也是和 NGUI 差不多。方便了 UI 的设计。（毕竟自家的东西怎么能没别人好呢）。"),e("u",[t._v("这个 UGUI 呢就是 Unity3D 里菜单里的 Gameobject 栏里的 "),e("code",[t._v("UI")]),t._v(" 里的可以创建的东西。")])]),t._v(" "),e("h3",{attrs:{id:"ngui-与-ngui-的区别与缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ngui-与-ngui-的区别与缺点"}},[t._v("#")]),t._v(" NGUI 与 NGUI 的区别与缺点")]),t._v(" "),e("h2",{attrs:{id:"基础篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础篇"}},[t._v("#")]),t._v(" 基础篇")]),t._v(" "),e("h3",{attrs:{id:"ui：gui-ugui"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ui：gui-ugui"}},[t._v("#")]),t._v(" UI：GUI & UGUI")]),t._v(" "),e("p",[t._v("将信息显示给玩家是 UI 在游戏中存在的一半原因（另一半原因是接收玩家的输入）")]),t._v(" "),e("p",[t._v("定义：")]),t._v(" "),e("p",[t._v("UI 是 User Interface（用户界面）的缩写，另一个紧密相关的术语是 GUI（graphical user interface，图形用户界面），指的是界面中的可视化部分，例如文本、按钮，而这些大部分人都称为 UI。")]),t._v(" "),e("p",[t._v("从技术上说，UI 包括非图形控件，例如键盘或手柄，但人们说的“UI” 经常指的是图形部分。")]),t._v(" "),e("p",[t._v("尽管任何软件都需要一些 UI 用于让用户控制软件，但游戏通常以与其他软件稍微不同的方式使用自己的 GUI。以网站为例，GUI 基本就是网站（就视觉表现而言）。"),e("u",[t._v("然而在一个游戏中，文本和按钮通常覆盖在游戏视图上，这是一种称为 HUD 的显示。")])]),t._v(" "),e("p",[e("img",{attrs:{src:s(613),alt:""}})]),t._v(" "),e("p",[t._v("定义：")]),t._v(" "),e("p",[t._v("平视显示（HUD，heads-up display）"),e("u",[t._v("使得图形叠加在世界视图上。")]),t._v("这个概念源于军用飞机，目的是为了让飞行员不低头就能看到重要信息。类似的，GUI 像 HUD 一样叠加在游戏视图上。")]),t._v(" "),e("p",[t._v("就像钢铁侠的眼镜。")]),t._v(" "),e("ul",[e("li",[t._v("规划界面")]),t._v(" "),e("li",[t._v("放置显示的 UI 元素")]),t._v(" "),e("li",[t._v("对 UI 元素编写交互")]),t._v(" "),e("li",[t._v("让 GUI 响应场景中的事件")]),t._v(" "),e("li",[t._v("让场景响应 GUI 的动作")])]),t._v(" "),e("h4",{attrs:{id:"unity-创建-ui-的几种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unity-创建-ui-的几种方式"}},[t._v("#")]),t._v(" Unity 创建 UI 的几种方式")]),t._v(" "),e("h4",{attrs:{id:"传统-2d-游戏：摄像机模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#传统-2d-游戏：摄像机模式"}},[t._v("#")]),t._v(" 传统 2D 游戏：摄像机模式")]),t._v(" "),e("p",[t._v("使用标准的显示对象来构建（直接构建 3D 对象、或拖动 Sprite 精灵图对象）+ 正交摄像机。")]),t._v(" "),e("ul",[e("li",[t._v("鼠标点击交互等跟其他的带有碰撞器的 3D 对象一样。")])]),t._v(" "),e("h5",{attrs:{id:"创建文本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建文本"}},[t._v("#")]),t._v(" 创建文本")]),t._v(" "),e("p",[t._v("Unity 中有多种创建文本显示的方式。"),e("u",[t._v("一种方式是在场景中创建 3D 文本对象。")]),t._v("这是一个特殊的网格组件，因此先创建一个空对象并将这个组件附加到空对象上。从 GameObject 菜单选择 Create Empty。接着单击 Add Component 按钮并选择 "),e("code",[t._v("Mesh | Text Mesh")]),t._v("，也可以直接新建 3D Text，它也是带有这个网格文本组件，成为了 3D 文本对象。")]),t._v(" "),e("p",[t._v("注意：")]),t._v(" "),e("p",[t._v("3D 文本，可能听起来和 2D 游戏不兼容，但是不要王姐这只是技术上的 3D 场景，它看起来是平坦的，因为观察这个场景的是一个`正交摄像机。"),e("u",[t._v("这意味着我们可以在需要时将任何 3D 对象放置到 2D 游戏中——它们只是以平面透视显示。")])]),t._v(" "),e("p",[t._v("需要做一些调整才能让默认文本看起来更锐利和清晰。增加 Font Size 为文本显示增加了很多像素，缩放对象把那些像素压缩到一个更小的空间。")]),t._v(" "),e("h4",{attrs:{id:"gui-直接模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gui-直接模式"}},[t._v("#")]),t._v(" GUI 直接模式")]),t._v(" "),e("p",[t._v("Unity 的第一个 GUI 系统是直接模式（immediate mode）GUI 系统，该系统可以使在屏幕上放置按钮很简单。")]),t._v(" "),e("p",[t._v("定义：")]),t._v(" "),e("p",[t._v("直接模式在每帧显式发出绘制命令。而对于另一种系统，只需要定义所有的视觉效果，之后系统就知道每帧需要绘制什么，而不必再重新声明。后一种方法称为保留模式。（retained mode）。")]),t._v(" "),e("div",{staticClass:"language-cs line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("UnityEngine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Collections")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BasicUI")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token type-list"}},[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MonoBehaviour")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token return-type class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GUI")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GUI"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Button")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Rect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Test"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      Debug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Test Button"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("p",[t._v("每个 MonoBehaviour 自动响应 OnGUI() 方法。这个方法会在每帧渲染完 3D 场景后执行，它提供了一个放置 GUI 绘制命令的入口。")]),t._v(" "),e("h4",{attrs:{id:"ugui-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ugui-2"}},[t._v("#")]),t._v(" UGUI")]),t._v(" "),e("p",[t._v("新的 UI 系统基于保留模式工作，因此图形只需要布局一次就能在每帧被绘制而不需要重新定义。在这个系统中，用于 UI 的图形放置在编辑器中。相比于直接模式 UI，这提供了两个优势：")]),t._v(" "),e("ol",[e("li",[t._v("可以在放置 UI 元素时看到当前 UI 的外观；")]),t._v(" "),e("li",[t._v("这个系统可以让使用图像来定制 UI 变得更直接。为了使用这个系统，需要导入图像并将对象拖动到场景中。")])]),t._v(" "),e("h5",{attrs:{id:"设置-gui-显示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置-gui-显示"}},[t._v("#")]),t._v(" 设置 GUI 显示")]),t._v(" "),e("p",[t._v("Unity 提供了一些特殊的工具，使图像成为 HUD 并显示在 3D 场景上，而不是显示作为场景一部分的图像。UI 元素的定位通常有一些特殊的技巧，因为显示可能需要根据不同的屏幕上进行变化。")]),t._v(" "),e("h6",{attrs:{id:"为界面场景画布"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为界面场景画布"}},[t._v("#")]),t._v(" 为界面场景画布")]),t._v(" "),e("p",[t._v("UI 系统工作原理中最基础且最特殊的一面是"),e("u",[t._v("所有图像必须附加到画布对象上。")])]),t._v(" "),e("p",[t._v("提示：")]),t._v(" "),e("p",[t._v("画布（Canvas）是 Unity 用于为游戏渲染 UI 的一类特殊对象。")]),t._v(" "),e("p",[t._v("GameObject -> UI -> Canvas。该对象代表整个屏幕的范围，而且它的大小相对于 3D 场景，因为它将屏幕上的一个像素缩放为场景中的一个单位。")]),t._v(" "),e("p",[t._v("警告：")]),t._v(" "),e("p",[t._v("当创建 canvas 对象时，也会自动创建 EventSystem 对象。对于 UI 交互，该对象是必须的，但你可以忽略它。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(614),alt:""}})]),t._v(" "),e("p",[t._v("画布有一些可以调整的设置。首先是 "),e("code",[t._v("Render Mode")]),t._v(" 选项，让它保持默认设置，但你应该知道如下三种设置的含义：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Screen Space-Overlay")]),t._v("：将 UI 渲染为摄像机视图顶部的 2D 图形（这是默认设置）。")]),t._v(" "),e("li",[e("code",[t._v("Screen Space——Camera")]),t._v("：也将 UI 渲染在摄像机视图顶部，但 UI 元素可以进行透视效果的旋转。")]),t._v(" "),e("li",[e("code",[t._v("World Space")]),t._v("：将画布对象放置在场景中，就好像 UI 是 3D 场景的一部分。")])]),t._v(" "),e("p",[t._v("另外一个重要的设置是 "),e("code",[t._v("Pixel Perfect")]),t._v("，这个设置导致渲染轻微调整图像的位置，以使图像完全清晰和锐利（相反，在像素之间定位时会模糊它们）。")]),t._v(" "),e("h6",{attrs:{id:"按钮、图像和文本标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按钮、图像和文本标签"}},[t._v("#")]),t._v(" 按钮、图像和文本标签")]),t._v(" "),e("p",[t._v("画布对象定义了一个用于显示 UI 的区域，但它依然需要精灵来显示（按钮、图像、文本标签对象这些类似于 HTML5 的标签，然后链接图片）。在 GameObject 菜单的 UI 部分只要为每个元素创建图像、文本或按钮即可。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(615),alt:""}})]),t._v(" "),e("p",[e("img",{attrs:{src:s(616),alt:""}})]),t._v(" "),e("h6",{attrs:{id:"控制-ui-元素的位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#控制-ui-元素的位置"}},[t._v("#")]),t._v(" 控制 UI 元素的位置")]),t._v(" "),e("p",[t._v("所有 UI 对象都有锚点（anchor），在编辑器中显示为 target X。锚点是一种在 UI 中灵活定位对象的方式。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(617),alt:""}})]),t._v(" "),e("p",[t._v("定义：")]),t._v(" "),e("p",[t._v("对象的锚点是对象附加到画布或屏幕的点。它决定了计算对象的位置所依赖的点。")]),t._v(" "),e("p",[t._v("锚点的作用是当对象相对于锚点放置时，锚点相对画布移动。锚点定义为类似“屏幕中心”，那么当屏幕改变大小时锚点依然会在中心。类似的，设置锚点为屏幕的右边会让对象不管屏幕是否改变大小都保留在右边（例如，假设游戏在不同显示器上运行时）")]),t._v(" "),e("p",[t._v("下图中，无论屏幕如何缩放，立方体的图标一直位于屏幕的左上角。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(618),alt:""}})]),t._v(" "),e("h5",{attrs:{id:"编写-ui-的交互"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编写-ui-的交互"}},[t._v("#")]),t._v(" 编写 UI 的交互")]),t._v(" "),e("p",[t._v("提示：")]),t._v(" "),e("p",[t._v("有时，UI 默认的交互控件会影响游戏。记住 EventSystem 对象会随着画布被自动创建。EventSystem 对象控制 UI 交互控件，默认情况下，它使用方向按键来与 GUI 进行交互。你可能需要关闭 EventSystem 中的方向按键：在 EventSystem 设置中，不要选中 Send Navigation Event 复选框。")]),t._v(" "),e("p",[t._v("通常，所有 UI 元素的 UI 交互都一样，都以一系列标准步骤进行编写：")]),t._v(" "),e("ol",[e("li",[t._v("在场景中创建 UI 对象。")]),t._v(" "),e("li",[t._v("编写当操作 UI 时调用的代码。")]),t._v(" "),e("li",[t._v("将脚本附加到场景的对象上。（把脚本挂载到场景对象进行实例化）")]),t._v(" "),e("li",[t._v("通过脚本将 UI 元素（如按钮）关联到对象上。（脚本提供序列化引用）")])]),t._v(" "),e("p",[t._v("给按钮添加事件监听函数：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(619),alt:""}})]),t._v(" "),e("p",[t._v("将一个 OnClick 条目添加到按钮上并将控制器对象拖动到它上面。可以单击 + 按钮在面板上添加一个条目，每个条目都定义了一个函数，当单击按钮时就会调用这个函数。这个列表包含了一个对象槽和一个用于调用函数的菜单。将控制器对象拖动到对象槽上，并在菜单中年查找 UIController，选择其中的 OnOpenSetting\ns()。")]),t._v(" "),e("p",[e("strong",[t._v("响应其他鼠标事件")])]),t._v(" "),e("p",[t._v("OnClick 是按钮组件暴露给外部的唯一事件，但 UI 元素能响应各种不同的交互。为了使用默认交互以外的交互，可以使用 "),e("code",[t._v("EventTrigger")]),t._v(" 组件。")]),t._v(" "),e("p",[t._v("将一个新组件添加给按钮对象，在组件的菜单查找 Event 部分，选择 EventTrigger。")]),t._v(" "),e("p",[t._v("然后单击 Add New Event Type，给 EventTrigger 组件添加一个新类型。选择 Pointer Down z\n作为事件，这个操作将创建空的事件面板，就像 OnClick 面板一样。单击 + 按钮，添加事件列表，将控制器对象拖动到这个新增事件上，并选择 OnPointerDown()。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(620),alt:""}})]),t._v(" "),e("h6",{attrs:{id:"创建弹出窗口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建弹出窗口"}},[t._v("#")]),t._v(" 创建弹出窗口")]),t._v(" "),e("p",[t._v("弹出窗口是一个新的图像对象，在这个对象上附加有几个控件（例如，按钮和滑动条）。")]),t._v(" "),e("p",[t._v("通常，精灵在整个图像对象上被缩放，一般的方式是单击 "),e("code",[t._v("Set Native Size")]),t._v(" 按钮，重新设置"),e("code",[t._v("图像对象")]),t._v("的大小。这个行为是图像对象的默认设置，但弹出窗口将做一些不同的处理。")]),t._v(" "),e("p",[t._v("图像组件有 "),e("code",[t._v("Image Type")]),t._v(" 设置。这个设置默认为 Simple，这正是之前使用的正确图像类型。对于弹出窗口，将 Image Type 设置为 "),e("code",[t._v("Sliced")]),t._v("。")]),t._v(" "),e("p",[t._v("定义：")]),t._v(" "),e("p",[t._v("切割图像（sliced image）是把图像切割为九份，以便能缩放为不同的图像。通过从中间缩放图像边缘，可以确保图像在保留边缘大小和形状时被缩放为任何你期望的尺寸。简单来说，就是可以让你保持边框大小不变，只缩放内容区域。在其他开发工具中，此类图像在其名称中有个“九”字（例如，九切割、九片、缩放九），表示图像有九部分。")]),t._v(" "),e("p",[t._v("在切换到切割图像之前，需要把精灵图设置为九部分，否则会出现表明图像没有边框的错误。首先选择 Project 视图中的精灵，然后在 Inpector 中应该会看到 Spriter Editor 按钮。")]),t._v(" "),e("p",[t._v("在 Spriter Editor 中可以看到，绿色的线指示了图像是如何被切割的。初始时图像不会有任何边框（所有 Border 被设置为 0）。增加 4 条边的边框宽度（左、右、底部、顶部），边框线同时叠加为九部分。关闭编辑器窗口并应用修改。")]),t._v(" "),e("p",[t._v("之后确保 Image 组件设置 "),e("code",[t._v("Fill Center")]),t._v("，由于边框部分保留它们的大小，因此切割图像可以被缩放为任何大小并且保持清晰的边缘。")]),t._v(" "),e("p",[t._v("提示：")]),t._v(" "),e("p",[t._v("UI 图像如何彼此堆放取决于它们在 Hierarchy 视图中的顺序。在 Hierarchy 列表中，将弹出对象拖动到其他 UI 对象上（当然，还是保持附加到画布上）。现在在 Scene 视图中移动弹出窗口；将看到图像和弹出窗口重叠。最后将弹出窗口拖动到画布底部，以便它显示在其他任何 UI 元素之上。")]),t._v(" "),e("div",{staticClass:"language-cs line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Collections")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Collections"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Generic")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("UnityEngine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SettingPopup")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token type-list"}},[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MonoBehaviour")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n   * 开启对象，打开窗口\n   */")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token return-type class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Open")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    gameObject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetActive")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n   * 使对象无效，关闭窗口\n   */")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token return-type class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    gameObject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetActive")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br")])]),e("h6",{attrs:{id:"使用滑动条和输入域设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用滑动条和输入域设置"}},[t._v("#")]),t._v(" 使用滑动条和输入域设置")]),t._v(" "),e("p",[e("img",{attrs:{src:s(621),alt:""}})]),t._v(" "),e("p",[t._v("绑定事件监听回调函数：")]),t._v(" "),e("ul",[e("li",[t._v("对于滑动条查找组件设置底部的事件面板（OnValueChanged），单击 + 按钮添加一个条目，将弹出窗口拖动到对象槽上，选择要通知的回调函数。")])]),t._v(" "),e("p",[t._v("之后通过 "),e("code",[t._v("[SerializeField] private Slider speedSlider;")]),t._v(" 在其他脚本上获取控件的值。")]),t._v(" "),e("h5",{attrs:{id:"通过响应事件更新游戏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过响应事件更新游戏"}},[t._v("#")]),t._v(" 通过响应事件更新游戏")]),t._v(" "),e("p",[t._v("HUD 和主游戏之间互不相干，但它们之间应该是相互通信的。为此，可以通过我们为"),e("u",[t._v("其他类型的对象通信所创建的脚本引用来完成，")]),t._v("但这样做存在一些缺陷。特别是，这样做"),e("u",[t._v("将场景和 HUD 紧密耦合在一起，但你可能想要让它们相对独立，这样可以在编辑游戏时不必担心是否破坏 HUD。")])]),t._v(" "),e("p",[t._v("为了通知场景中 UI 的行为，接下去将使用消息广播系统。这个事件消息系统的工作原理：脚本可以注册为侦听事件，其他代码可以广播事件，接着侦听器将被通知有关广播的信息。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(622),alt:""}})]),t._v(" "),e("p",[t._v("提示：")]),t._v(" "),e("p",[t._v("C# 有一个内置的系统用于处理事件，所以你可能好奇为什么我们不使用内置的系统。内置的事件系统强制要求消息的目标，而我们需要的是广播消息系统。"),e("u",[t._v("目标系统需要代码精确知道消息的来源而广播的来源可以是任意的。")])]),t._v(" "),e("h6",{attrs:{id:"集成事件系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集成事件系统"}},[t._v("#")]),t._v(" 集成事件系统")]),t._v(" "),e("ul",[e("li",[t._v("http://wiki.unity3d.com/index.php/CSharpMessenger")])]),t._v(" "),e("h6",{attrs:{id:"从场景中广播和侦听事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从场景中广播和侦听事件"}},[t._v("#")]),t._v(" 从场景中广播和侦听事件")]),t._v(" "),e("p",[t._v("思路：")]),t._v(" "),e("ol",[e("li",[t._v("使用 messenger 在在 UIController 脚本里添加订阅某类事件。")]),t._v(" "),e("li",[t._v("然后进行在场景中对应的脚本进行触发该事件。")])]),t._v(" "),e("h6",{attrs:{id:"从-hud-广播和侦听事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从-hud-广播和侦听事件"}},[t._v("#")]),t._v(" 从 HUD 广播和侦听事件")]),t._v(" "),e("p",[t._v("思路：")]),t._v(" "),e("ol",[e("li",[t._v("使用 messenger 在场景中对应的脚本里添加订阅某类事件")]),t._v(" "),e("li",[t._v("然后在 UIController 脚本进行触发。")])]),t._v(" "),e("h5",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),e("ul",[e("li",[t._v("Unity 有立即模式（编写代码生成）的 GUI 系统，也有基于 2D 精灵的新 GUI 系统。")]),t._v(" "),e("li",[t._v("将 2D 精灵用于 GUI 需要场景有一个画布对象（Canvas）。")]),t._v(" "),e("li",[t._v("UI 元素能锚定在可调整画布的相对位置上。")]),t._v(" "),e("li",[t._v("设置 Active 属性来打开或关闭 UI 元素。")]),t._v(" "),e("li",[t._v("解耦的消息传送系统是在"),e("code",[t._v("界面")]),t._v("和"),e("code",[t._v("场景")]),t._v("之间广播事件的一种好方法。")])]),t._v(" "),e("p",[t._v("UI 对象也可以做成一个预设。")]),t._v(" "),e("h3",{attrs:{id:"基础对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础对象"}},[t._v("#")]),t._v(" 基础对象")]),t._v(" "),e("p",[t._v("基础对象由基础组件组成，例如 Button 对象包含 Button 组件和 Image 组件，下面主要说明组件的设置。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(343),alt:""}})]),t._v(" "),e("h4",{attrs:{id:"text"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#text"}},[t._v("#")]),t._v(" Text")]),t._v(" "),e("h4",{attrs:{id:"textmesh-pro"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#textmesh-pro"}},[t._v("#")]),t._v(" TextMesh Pro")]),t._v(" "),e("p",[t._v("TextMesh Pro 是 Unity 的最终文本解决方案。 它是 Unity UI 文本和旧版 Text Mesh 的完美替代。")]),t._v(" "),e("p",[t._v("功能强大且易于使用的 TextMesh Pro 使用了高级文本渲染技术以及一组自定义着色器。 提供了显着的视觉质量改进，同时在文本样式和纹理化方面为用户提供了难以置信的灵活性。")]),t._v(" "),e("p",[t._v("TextMesh Pro 提供了对文本格式和布局的改进控制，具有字符，单词，行和段落间距，字距调整，对齐文本，链接，超过 30 种富文本标签可用，支持多种字体和图片，自定义样式等功能。")]),t._v(" "),e("p",[t._v("性能很好。这是因为 TextMesh Pro 创建的几何图形与 Unity 的文本组件一样，每个字符都使用两个三角形，因此这种改进的视觉质量和灵活性不会带来任何性能成本的损失。")]),t._v(" "),e("h4",{attrs:{id:"image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#image"}},[t._v("#")]),t._v(" Image")]),t._v(" "),e("p",[t._v("Image 组件的参数说明")]),t._v(" "),e("p",[e("code",[t._v("SourceImage")]),t._v("：该 UI 显示的图片资源，注意这里只能支持 Sprite 类型的图片。")]),t._v(" "),e("p",[e("code",[t._v("Color")]),t._v(":修改该图片的颜色。")]),t._v(" "),e("p",[e("code",[t._v("Material")]),t._v("： Unity 支持自定义图片材质来实现复杂的效果，不填的话默认只用 unity 已经设置好的 UI 材质效果。在游戏设计中几乎不会修改这里的内容。")]),t._v(" "),e("p",[e("code",[t._v("RaycastTarget")]),t._v("： 勾选该选项后，该 UI 将会响应射线点击，鼠标点击到这个 UI 物体的时候事件管理器知道我们点击了什么物体，这个参数会和 Button 组件配合，完成我们的点击操作")]),t._v(" "),e("h4",{attrs:{id:"raw-image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#raw-image"}},[t._v("#")]),t._v(" Raw Image")]),t._v(" "),e("p",[t._v("适应 Texture 图片。")]),t._v(" "),e("h4",{attrs:{id:"button"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#button"}},[t._v("#")]),t._v(" Button")]),t._v(" "),e("h4",{attrs:{id:"button-textmeshpros"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#button-textmeshpros"}},[t._v("#")]),t._v(" Button-TextMeshPros")]),t._v(" "),e("h4",{attrs:{id:"toggle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#toggle"}},[t._v("#")]),t._v(" Toggle")]),t._v(" "),e("h4",{attrs:{id:"slider"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#slider"}},[t._v("#")]),t._v(" Slider")]),t._v(" "),e("h4",{attrs:{id:"scrollbar"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scrollbar"}},[t._v("#")]),t._v(" Scrollbar")]),t._v(" "),e("h4",{attrs:{id:"dropdown"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dropdown"}},[t._v("#")]),t._v(" Dropdown")]),t._v(" "),e("h4",{attrs:{id:"dropdown-textmeshprop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dropdown-textmeshprop"}},[t._v("#")]),t._v(" Dropdown-TextMeshProp")]),t._v(" "),e("h4",{attrs:{id:"input-field"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input-field"}},[t._v("#")]),t._v(" Input Field")]),t._v(" "),e("h4",{attrs:{id:"input-field-textmeshpro"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input-field-textmeshpro"}},[t._v("#")]),t._v(" Input Field - TextMeshPro")]),t._v(" "),e("h4",{attrs:{id:"canvas"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#canvas"}},[t._v("#")]),t._v(" Canvas")]),t._v(" "),e("h4",{attrs:{id:"panel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#panel"}},[t._v("#")]),t._v(" Panel")]),t._v(" "),e("h4",{attrs:{id:"scroll-view"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scroll-view"}},[t._v("#")]),t._v(" Scroll View")]),t._v(" "),e("h4",{attrs:{id:"event-system"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-system"}},[t._v("#")]),t._v(" Event System")]),t._v(" "),e("p",[e("img",{attrs:{src:s(623),alt:""}})]),t._v(" "),e("p",[t._v("任何的对象都可以切换到 Debug 模式，查看更加具体的参数设置。")]),t._v(" "),e("h3",{attrs:{id:"ui-显示：基础组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ui-显示：基础组件"}},[t._v("#")]),t._v(" UI 显示：基础组件")]),t._v(" "),e("h4",{attrs:{id:"recttransform"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#recttransform"}},[t._v("#")]),t._v(" RectTransform")]),t._v(" "),e("p",[e("img",{attrs:{src:s(624),alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("Width 和 Height")]),t._v("：一般UI里面放大和缩小图片的宽度和高度都是通过这里来控制的，而不是直接调整缩放值")]),t._v(" "),e("p",[e("code",[t._v("btnDog.GetComponent<RectTransform>().anchoredPosition")]),t._v(" 这个 anchoredPosition 是此RectTransform枢轴相对于锚参考点的位置。")]),t._v(" "),e("h5",{attrs:{id:"anchors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#anchors"}},[t._v("#")]),t._v(" Anchors")]),t._v(" "),e("p",[t._v("Anchors 是在子类锚在父类上的点，因此如果没有父类（RectTransform），那么 RectTransform 属性面板上的Anchor Presets 将不可设置，但 Anchors 仍可设置。")]),t._v(" "),e("p",[t._v("所谓，锚在父类上，意思就是"),e("u",[t._v("子类的 Pivot（中心点）到（父类上）Anchors（锚点）的相对位置不变，")]),t._v("而这个位置就是RectTransform面板上显示的——PosX，PosY，PosZ——对应了anchoredPosition3D（PosX，PosY，PosZ），或anchoredPosition（PosX，PosY）。")]),t._v(" "),e("p",[t._v("锚点(Anchor) 可以理解为定义了物体的所在区域，在 Unity Editor 中不同的锚点方式也会影响怎样去布局该物体。\n比如当我选择了全部铺满之后，控制 UI 位置的属性是 Left, Top, Right 和 Bottom。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(625),alt:""}})]),t._v(" "),e("p",[t._v("Anchors 的重要作用，就是无论父类如何变化，子类相对于父类上Anchors 的相对位置都不变。")]),t._v(" "),e("p",[t._v("而当我选择了横向铺满之后，控制 UI 位置的属性则是 Left, Right PosY 和 Height。因为此时 Width 是铺满的，不需要控制。")]),t._v(" "),e("p",[e("strong",[t._v("Anchors")]),t._v("：锚点位置，屏幕的宽高变化时要让 UI 依然能按照预想的正常显示，就需要通过锚点来定位。")]),t._v(" "),e("p",[t._v("当使用 Panel 对象时，由于宽度已经平铺为 Canvas\n的大小，此时的 PosX 和 PosY 和 Width、Height 就会被 Left、Right、Top、Bottom 替代，只要用来设置缩放的值。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(626),alt:""}})]),t._v(" "),e("p",[t._v("设置锚点后，移动物体的本地坐标即以锚点为起点。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(627),alt:""}})]),t._v(" "),e("h5",{attrs:{id:"anchor-presets"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#anchor-presets"}},[t._v("#")]),t._v(" Anchor Presets")]),t._v(" "),e("p",[t._v("Anchor Presets 是对 Anchors的快捷设置选项，提供了最常用的几种Anchors设置模式，如：上中下，左中右，拉伸。如果不使用这里的预设，通过代码（anchorMax，anchorMin），或是面板属性，也是可以自定义设置的")]),t._v(" "),e("p",[t._v("四角（拉伸）")]),t._v(" "),e("p",[e("img",{attrs:{src:s(628),alt:""}})]),t._v(" "),e("p",[t._v("在这种情况下，面板上的 PosX，PosY，Width，Height 会被Left，Right，Top，Bottom 取代。这代表着，RectTransform 的区域到 Anchors 在 xy 方向上的四周距离（类似CSS布局中的 padding）")]),t._v(" "),e("h5",{attrs:{id:"pivot"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pivot"}},[t._v("#")]),t._v(" Pivot")]),t._v(" "),e("p",[t._v("中心点，该属性定义图片的中心点位置，（0.5,0.5）改好为图片中心。若我们想左右拉长一个横条，想让它只在右边增长，修改中心店位置（0，0.5），中心点位在最左边，调整 Width 就会只看到横条在右方向的长度变化。")]),t._v(" "),e("p",[t._v("UI 图形的 posX、posY 等的大小的计算是以锚点为坐标原点，UI 的轴心为终点。")]),t._v(" "),e("p",[t._v("而轴心点的定位，是根据屏幕坐标为计算的，也就是左下角为屏幕坐标的原点。")]),t._v(" "),e("p",[t._v("设置轴心点的位置，处理移动 posX 外，也可以对于缩放的 width、height 作参考点。")]),t._v(" "),e("h5",{attrs:{id:"blueprint-mode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#blueprint-mode"}},[t._v("#")]),t._v(" Blueprint Mode")]),t._v(" "),e("p",[t._v("固定 UI 框，不随着里面图形的旋转、缩放变化，保持响应区域。")]),t._v(" "),e("h5",{attrs:{id:"raw-edit-mode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#raw-edit-mode"}},[t._v("#")]),t._v(" Raw Edit Mode")]),t._v(" "),e("p",[t._v("启用时，作用于编辑轴和锚点值不会为了使矩形停留在一个位置而反向调整矩形的位置和大小。")]),t._v(" "),e("h4",{attrs:{id:"canvas-组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#canvas-组件"}},[t._v("#")]),t._v(" Canvas 组件")]),t._v(" "),e("h4",{attrs:{id:"image-组件的参数说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#image-组件的参数说明"}},[t._v("#")]),t._v(" Image 组件的参数说明")]),t._v(" "),e("p",[e("strong",[t._v("SourceImage")]),t._v("：该UI显示的图片资源，注意这里只能支持Sprite类型的图片，后面会介绍Sprite类型的图片怎么设置。")]),t._v(" "),e("p",[e("strong",[t._v("Color")]),t._v(":修改该图片的颜色。")]),t._v(" "),e("p",[e("strong",[t._v("Material")]),t._v("： Unity支持自定义图片材质来实现复杂的效果，不填的话默认只用unity已经设置好的UI材质效果。在游戏设计中几乎不会修改这里的内容。")]),t._v(" "),e("p",[e("strong",[t._v("RaycastTarget")]),t._v("： 勾选该选项后，该UI将会响应射线点击，鼠标点击到这个UI物体的时候事件管理器知道我们点击了什么物体，这个参数会和Button组件配合，完成我们的点击操作。")]),t._v(" "),e("h4",{attrs:{id:"渲染顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染顺序"}},[t._v("#")]),t._v(" 渲染顺序")]),t._v(" "),e("p",[t._v("Unity UGUI")]),t._v(" "),e("ol",[e("li",[t._v("Unity3d中的渲染顺序如下：\n不同的Camera的Depth\n相同Camera下的不同SortingLayer\n相同SortingLayer下的不同Z轴/Order in Layer")]),t._v(" "),e("li",[t._v("改变控件之间的层级关系\n(1)同一canvas下：\n改变控件transform的SiblingIndex,\ntransform.GetSiblingIndex();\ntransform.SetSiblingIndex(int index); //index值越大，越后渲染，层级越大，越显示在前面\n(2)不同Canvas下：\n设置Canvas下的Sort Order //Sort Order值越大，越后渲染，层级越大，越显示在前面")])]),t._v(" "),e("h4",{attrs:{id:"遮罩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#遮罩"}},[t._v("#")]),t._v(" 遮罩")]),t._v(" "),e("p",[t._v("Mark 组件")]),t._v(" "),e("h4",{attrs:{id:"轴心点参数的应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#轴心点参数的应用"}},[t._v("#")]),t._v(" 轴心点参数的应用")]),t._v(" "),e("h4",{attrs:{id:"富文本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#富文本"}},[t._v("#")]),t._v(" 富文本")]),t._v(" "),e("h4",{attrs:{id:"每种组件的示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#每种组件的示例"}},[t._v("#")]),t._v(" 每种组件的示例")]),t._v(" "),e("h4",{attrs:{id:"扩展-ugui-组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展-ugui-组件"}},[t._v("#")]),t._v(" 扩展 UGUI 组件")]),t._v(" "),e("h4",{attrs:{id:"图文混排"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#图文混排"}},[t._v("#")]),t._v(" 图文混排")]),t._v(" "),e("h4",{attrs:{id:"ugui-图表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ugui-图表"}},[t._v("#")]),t._v(" UGUI 图表")]),t._v(" "),e("h4",{attrs:{id:"多语言解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多语言解决方案"}},[t._v("#")]),t._v(" 多语言解决方案")]),t._v(" "),e("h4",{attrs:{id:"ui-的优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ui-的优化"}},[t._v("#")]),t._v(" UI 的优化")]),t._v(" "),e("h3",{attrs:{id:"设置-ui-交互"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置-ui-交互"}},[t._v("#")]),t._v(" 设置 UI 交互")]),t._v(" "),e("h3",{attrs:{id:"ui-响应事件系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ui-响应事件系统"}},[t._v("#")]),t._v(" UI 响应事件系统")]),t._v(" "),e("h2",{attrs:{id:"屏幕适配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#屏幕适配"}},[t._v("#")]),t._v(" 屏幕适配")]),t._v(" "),e("h2",{attrs:{id:"案例篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#案例篇"}},[t._v("#")]),t._v(" 案例篇")]),t._v(" "),e("h3",{attrs:{id:"菜单实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#菜单实现"}},[t._v("#")]),t._v(" 菜单实现")]),t._v(" "),e("h4",{attrs:{id:"跳转"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跳转"}},[t._v("#")]),t._v(" 跳转")]),t._v(" "),e("p",[t._v("可以通过不同场景的切换，如果 UI 简单，也可以在同一个场景进行切换。")]),t._v(" "),e("h3",{attrs:{id:"血条"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#血条"}},[t._v("#")]),t._v(" 血条")]),t._v(" "),e("p",[t._v("参考资料：《Unity 2D 3D 手机游戏》")]),t._v(" "),e("p",[t._v("血条形状")]),t._v(" "),e("ul",[e("li",[t._v("方形")]),t._v(" "),e("li",[t._v("圆形")])]),t._v(" "),e("p",[t._v("应用")]),t._v(" "),e("ul",[e("li",[t._v("小兵血条")]),t._v(" "),e("li",[t._v("主角血条")]),t._v(" "),e("li",[t._v("boss 血条")]),t._v(" "),e("li",[t._v("多条命")])]),t._v(" "),e("h4",{attrs:{id:"实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),e("p",[t._v("其实跟 HTML 的套路差不多，有以下几种方案：")]),t._v(" "),e("ul",[e("li",[t._v("可以通过 Slider UI，然后改变它的样式即可。")]),t._v(" "),e("li",[t._v("可以通过两个层叠的 GameObject，改变内部元素的 transform （配合遮罩实现）或者宽度变大缩小。")]),t._v(" "),e("li",[t._v("利用 Image 的 FillMount 进行填充模拟效果")])]),t._v(" "),e("p",[e("img",{attrs:{src:s(629),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"加载进度条"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加载进度条"}},[t._v("#")]),t._v(" 加载进度条")]),t._v(" "),e("ul",[e("li",[t._v("CD 技能效果（Cool Down Time）")]),t._v(" "),e("li",[t._v("界面加载")])]),t._v(" "),e("p",[t._v("对于 CD 技能效果，可以根据时间来转动圆弧的角度。")]),t._v(" "),e("h3",{attrs:{id:"场景小地图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#场景小地图"}},[t._v("#")]),t._v(" 场景小地图")]),t._v(" "),e("h3",{attrs:{id:"ui-遮挡-3d-物体响应"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ui-遮挡-3d-物体响应"}},[t._v("#")]),t._v(" UI 遮挡 3D 物体响应")]),t._v(" "),e("h4",{attrs:{id:"解决-ui-和-3d-物体层叠时，只响应-ui-的问题（击穿）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决-ui-和-3d-物体层叠时，只响应-ui-的问题（击穿）"}},[t._v("#")]),t._v(" 解决 UI 和 3D 物体层叠时，只响应 UI 的问题（击穿）")]),t._v(" "),e("div",{staticClass:"language-cs line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[t._v("    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Input"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetMouseButtonDown")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("EventSystem"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsPointerOverGameObject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查 GUI 未被使用")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h3",{attrs:{id:"在-fps-上设置-2d-图形用户界面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在-fps-上设置-2d-图形用户界面"}},[t._v("#")]),t._v(" 在 FPS 上设置 2D 图形用户界面")]),t._v(" "),e("h2",{attrs:{id:"优化篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化篇"}},[t._v("#")]),t._v(" 优化篇")]),t._v(" "),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/37720993",target:"_blank",rel:"noopener noreferrer"}},[t._v("UGUI基础控件使用（一）"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://blog.csdn.net/weixin_38621217/article/details/77622309",target:"_blank",rel:"noopener noreferrer"}},[t._v("游戏开发之 UGUI 搭建 UI 界面"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/28906086",target:"_blank",rel:"noopener noreferrer"}},[t._v("【Unity】UGUI 系列教程——监听事件！完成解谜！"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/28905447",target:"_blank",rel:"noopener noreferrer"}},[t._v("【Unity】UGUI 系列教程————UGUI 基础！界面拼接！"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://blog.csdn.net/zcaixzy5211314/article/details/86515168",target:"_blank",rel:"noopener noreferrer"}},[t._v("UGUI 系列导航帖"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("《Unity 5 实战》")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://gameinstitute.qq.com/community/detail/116452",target:"_blank",rel:"noopener noreferrer"}},[t._v("【UI】UGUI 与 NGUI 的区别与优缺点"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://blog.csdn.net/weixin_43151516/article/details/82670164",target:"_blank",rel:"noopener noreferrer"}},[t._v("NGUI 和 UGUI 和 GUI 的学习感想"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("Unity 编辑器自带手册")]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.sikiedu.com/my/course/468",target:"_blank",rel:"noopener noreferrer"}},[t._v("UGUI 整体解决方案-基础篇（Unity 2019.1.0f2）"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/139252379",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unity3D RectTransform使用详解：布局、属性、方法"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports},343:function(t,a,s){t.exports=s.p+"assets/img/2020-06-14-19-52-32-unity-ugui-01.0233853e.png"},613:function(t,a,s){t.exports=s.p+"assets/img/2020-06-15-19-03-02-unity-ui-01.0fabbc28.png"},614:function(t,a,s){t.exports=s.p+"assets/img/2020-06-15-20-08-22-unity-canvas-02.b41cc7bd.png"},615:function(t,a,s){t.exports=s.p+"assets/img/2020-06-15-21-59-06-unity-canvas-image.490773ed.png"},616:function(t,a,s){t.exports=s.p+"assets/img/2020-06-15-21-59-26-unity-canvas-03.76f44caa.png"},617:function(t,a,s){t.exports=s.p+"assets/img/2020-06-15-22-23-23-unity-ui-anchor-01.552cd1ae.png"},618:function(t,a,s){t.exports=s.p+"assets/img/2020-06-15-22-19-55-unity-ui-anchor.629da7ae.png"},619:function(t,a,s){t.exports=s.p+"assets/img/2020-06-15-23-05-40-unity-ui-button.3298be9a.png"},620:function(t,a,s){t.exports=s.p+"assets/img/2020-06-15-23-11-52-unity-ui-button-event.d00d0001.png"},621:function(t,a,s){t.exports=s.p+"assets/img/2020-06-16-20-29-21-unity-ui.3235e356.png"},622:function(t,a,s){t.exports=s.p+"assets/img/2020-06-16-21-05-32-event-broadcast-system.4aefb03c.png"},623:function(t,a,s){t.exports=s.p+"assets/img/2020-06-17-22-36-08-ui-debug.7eb154fa.png"},624:function(t,a,s){t.exports=s.p+"assets/img/2020-06-17-23-05-13-ui-rect-transform.e43843a1.png"},625:function(t,a,s){t.exports=s.p+"assets/img/2020-06-20-00-01-44-unity-anchor.43dbec70.png"},626:function(t,a,s){t.exports=s.p+"assets/img/2020-06-20-00-30-53-anchors.6fad4882.png"},627:function(t,a,s){t.exports=s.p+"assets/img/2020-06-22-22-30-57-anchor.477f724e.png"},628:function(t,a,s){t.exports=s.p+"assets/img/2020-06-23-22-23-11-anchor.b3201d4d.png"},629:function(t,a,s){t.exports=s.p+"assets/img/2020-06-24-21-48-29-fill-image.28e4aa23.png"}}]);