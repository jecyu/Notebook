(window.webpackJsonp=window.webpackJsonp||[]).push([[210],{1457:function(t,s,a){"use strict";a.r(s);var n=a(44),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("正则表达式是一个查找和替换字符串的强有力的工具。")]),t._v(" "),a("p",[t._v("完整的正则表达式由两种字符构成。特殊字符，例如 "),a("code",[t._v("*")]),t._v(" 称为 "),a("code",[t._v("“元字符”（metacharacters）")]),t._v("，其他为"),a("code",[t._v("“文字”（literal）")]),t._v("，或者是普通文本字符（normal text characters）。")]),t._v(" "),a("p",[t._v("我们可以把正则表达式想象为普通的语言，普通字符对应普通语言中的单词，而元字符对应语法。根据语言的规则，按照语法把单词组合起来，就会得到能传达思想的文本。")]),t._v(" "),a("p",[t._v("抛出一个问题：使用正则读取 cookie")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cookie "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cookie"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'(^|;\\\\s*)('")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("')=([^;]*)'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" match "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decodeURIComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" cookie"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("下面这行代码的具体意思是？先往下阅读，再回过头理解这行代码。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'(^|;\\\\s*)('")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("')=([^;]*)'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("凡是涉及到文字处理的领域，大多数都可以使用（也有例外，Word里面不能用），尤其是程序员的日常开发，完全是和文本打交道的，所有的代码都是文本，写代码本身就是文字处理，所以与正则表达式是密不可分的。")]),t._v(" "),a("h2",{attrs:{id:"正则表达式思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式思想"}},[t._v("#")]),t._v(" 正则表达式思想")]),t._v(" "),a("blockquote",[a("p",[t._v("在 mac shell 终端中可以使用检索文本文件："),a("code",[t._v("Egrep")]),t._v(" 命令行工具，进行以下正则表达式知识的实践使用。egrep 把第一个命令行参数视为一个正则表达式，剩下的v参数作为待检索的文件名。\negrep '正则表达式' mailbox-file")])]),t._v(" "),a("h3",{attrs:{id:"元字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),a("h4",{attrs:{id:"行的开始和结束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行的开始和结束"}},[t._v("#")]),t._v(" 行的开始和结束")]),t._v(" "),a("p",[t._v("脱字符号 "),a("code",[t._v("^")]),t._v(" 和 美元符号 "),a("code",[t._v("$")]),t._v("，在检查一行文本时，"),a("code",[t._v("^")]),t._v(" 代表一行的开始，"),a("code",[t._v("$")]),t._v(" 代表一行的结束。")]),t._v(" "),a("p",[t._v("比如正则表达式 "),a("code",[t._v("cat")]),t._v(" 寻找的是一行文本中任意位置的 "),a("code",[t._v("c·a·t")]),t._v("，但是 "),a("code",[t._v("^cat")]),t._v("只寻找行首的 "),a("code",[t._v("c·a·t")]),t._v("——"),a("code",[t._v("^")]),t._v(" 用来把匹配文本（这个表达式的其他部分匹配的字符）“锚定”（anchor）在这一行的开头。同样，"),a("code",[t._v("cat$")]),t._v(" 只寻找位于行末的 "),a("code",[t._v("c·a·t")]),t._v("，例如以 scat 结尾的行。")]),t._v(" "),a("p",[t._v("正确的理解："),a("code",[t._v("^cat")]),t._v(" 匹配的是以 c 作为一行的第一个字符，紧接一个 a，紧接一个 t 的文本。")]),t._v(" "),a("p",[t._v("比如有以下文本：")]),t._v(" "),a("p",[t._v("catxxx\ncatany\nbatany")]),t._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("egrep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^cat"')]),t._v(" word.list \ncatxxx\ncatany\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h4",{attrs:{id:"字符组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符组"}},[t._v("#")]),t._v(" 字符组")]),t._v(" "),a("h5",{attrs:{id:"匹配若干字符之一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配若干字符之一"}},[t._v("#")]),t._v(" 匹配若干字符之一")]),t._v(" "),a("p",[t._v("如果我们需要搜索的是单词 “grey”，同时又不确定它是否写作 “grey”，就可以使用正则表达式结构体（contruct）"),a("code",[t._v("[...]")]),t._v("。它容许使用者列出在某处期望匹配的字符，通常被称做"),a("strong",[t._v("字符组")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("[e]")]),t._v("匹配字符 e，"),a("code",[t._v("[a]")]),t._v(" 匹配字符 a，而正则表达式 "),a("code",[t._v("[ea]")]),t._v(" 能匹配 a 或者 e。 所以，"),a("code",[t._v("[gr[ea]y]")]),t._v(" 的意思是：先找到 g，跟着是一个 r，然后是一个 a 或则 e，最后是一个 y。")]),t._v(" "),a("blockquote",[a("p",[t._v("mac 终端 egrep 正则 文件")])]),t._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("egrep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"h[123456]"')]),t._v(" index.html\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("结果")]),t._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("1")]),t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("1")]),t._v("<")]),t._v("/h"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("1")]),t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v("<")]),t._v("/h"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("3")]),t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("3")]),t._v("<")]),t._v("/h"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("3")]),t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("4")]),t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("4")]),t._v("<")]),t._v("/h"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("4")]),t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("5")]),t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("5")]),t._v("<")]),t._v("/h"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("5")]),t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("6")]),t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("6")]),t._v("<")]),t._v("/h"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("6")]),t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h5",{attrs:{id:"排除型字符组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排除型字符组"}},[t._v("#")]),t._v(" 排除型字符组")]),t._v(" "),a("p",[t._v("用 "),a("code",[t._v("[^...]")]),t._v(" 取代 "),a("code",[t._v("[...]")]),t._v("，这个字符组就会匹配任何未列出的字符。例如，"),a("code",[t._v("[^1-6]")]),t._v(" 匹配除了 1 到 6 以外的任何字符。"),a("strong",[t._v("这个字符组中的 "),a("code",[t._v("^")]),t._v(" 表示 “排除（negate）”，列出不希望匹配的字符。")])]),t._v(" "),a("p",[t._v("只有在字符串组内部（而且不是第一个字符的情况下），连字符才能表示范围。在字符串外部，"),a("strong",[a("code",[t._v("^")]),t._v(" 表示一个行锚点（line anchor），但是在字符组内部（而且必须是紧接在字符组的第一个括号之后），它就是一个元字符")]),t._v("。")]),t._v(" "),a("p",[t._v("我们需要在一堆英文单词中搜索出一些特殊的单词：在这些单词中，字母 q 后面的字母不是 u。用正则表达式来表示，就是 "),a("code",[t._v("q[^u]")]),t._v("。\n比如")]),t._v(" "),a("p",[t._v("qoph\nqueue\ntaskQueue\nQantans\nIraq\nIraqian\nqasida")]),t._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("qoph\nIraqian\nqasida\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("为什么无法匹配 "),a("code",[t._v("Iraq")]),t._v(" 呢？正则表达式要求 q 之后跟一个 u 以外的字符，如果文本行的结尾有一个换行字符，就可以成功匹配到。因为 egrep 会在检查正则表达式之前把这些换行符去掉，所以在行尾的 q 之后，没有能够匹配到 u 以外的字符。")]),t._v(" "),a("h4",{attrs:{id:"用点匹配任意字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用点匹配任意字符"}},[t._v("#")]),t._v(" 用点匹配任意字符")]),t._v(" "),a("p",[t._v("元字符 "),a("code",[t._v("[.]")]),t._v("（通常称为点号）用来匹配任意字符的字符组的简便写法。如果我们需要在表达式中使用一个“匹配任何字符”的占位符（placeholder），用点号就很方便。")]),t._v(" "),a("p",[t._v("例如，如果我们需要搜索 03/19/16、03-19-76 或则 03.09.76，不怕麻烦的话用一个明确允许 "),a("code",[t._v("/")]),t._v("、"),a("code",[t._v("-")]),t._v("、"),a("code",[t._v(".")]),t._v(" 的字符组来构建正则表达式，例如 "),a("code",[t._v("03[-./]19[-./]76")]),t._v("，也可以简单用 "),a("code",[t._v("03.19.76")]),t._v("。")]),t._v(" "),a("p",[t._v("测试\n03/19/16\n03-19-16\n03.19.16\n03219316\n03--19--16")]),t._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("egrep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"03.19.16"')]),t._v(" word.list \n\n03/19/16\n03-19-16\n03.19.16\n03219316\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("实际测中，发现正则表达式没有匹配到 "),a("code",[t._v("-")]),t._v(" 或 "),a("code",[t._v("/")]),t._v(" 的字符串。")]),t._v(" "),a("p",[t._v("值得一提的是，在 "),a("code",[t._v("03[-./]19[-./]76")]),t._v(" 中，点号并不是元字符，因为它们在字符串组内部（记住，在字符串组里面和外面，元字符的定义和意义是不一样的）。这里的连字符也不是元字符，因为它们都紧接在 "),a("code",[t._v("[")]),t._v(" 或者 "),a("code",[t._v("[^")]),t._v(" 之后。")]),t._v(" "),a("h4",{attrs:{id:"多选结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多选结构"}},[t._v("#")]),t._v(" 多选结构")]),t._v(" "),a("h5",{attrs:{id:"匹配任意子表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配任意子表达式"}},[t._v("#")]),t._v(" 匹配任意子表达式")]),t._v(" "),a("p",[a("code",[t._v("|")]),t._v(" 是一个“或”（or）元字符，依靠它，我们能够把不同的子表达式组合成一个总的表达式，而这个总的表达式又能够匹配任意的子表达式。")]),t._v(" "),a("p",[t._v("例如 「Bob」 和 「Robert」是两个表达式，但 "),a("code",[t._v("Bob|Robert")]),t._v(" 就是能够同时匹配其中的任意一个的正则表达式。在这样的组合中，子表达式称为“多选分分支（alternative）”")]),t._v(" "),a("p",[t._v("回头看 "),a("code",[t._v("gr[ea]y")]),t._v(" 的例子，它还可以写作 "),a("code",[t._v("grey|gray")]),t._v("，或者是 "),a("code",[t._v("gr(a|e)y")]),t._v("。后者用括号来划定多选结构的范围（正常情况，括号也是元字符）是必须的，因为没有括号，它的意思就变成了 "),a("code",[t._v("gra")]),t._v(" 或者 "),a("code",[t._v("ey")]),t._v("。")]),t._v(" "),a("p",[t._v("First\n1st")]),t._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("egrep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"(Fir|1)st"')]),t._v(" word.list\n\nFirst\n1st\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[a("code",[t._v("gr[ea]y")]),t._v(" 与 "),a("code",[t._v("gr(a|e)y")]),t._v(" 的例子可能会让人觉得多选结构与字符组没太大的区别，但是请留神不要混淆这两个概念。一个字符组只能匹配目标文本中的单个字符，而每个多选结构自身都可能是完整的正则表达式，都可以匹配任意长度的文本。")]),t._v(" "),a("p",[t._v("字符组基本可以算是一门独立的微型语言（例如，对于元字符，它们有自己的规定），而多选结构是“正则表达式语言主体”的一部分。")]),t._v(" "),a("p",[t._v("同时，在一个包含多选结构的表达式中使用脱字符和美元符的时候也要小心，比如 "),a("code",[t._v("^From|Subject|Date:")]),t._v(" 和 "),a("code",[t._v("^(From|Subject|Date):")]),t._v(" 就会发现，它们看起来一样，但结果却大不相同。第一个表达式由 3 个多选分支构成，所以它能够匹配 "),a("code",[t._v("^From")]),t._v(" 或者 "),a("code",[t._v("Subject")]),t._v(" 或者 "),a("code",[t._v("Date:")]),t._v(" 。")]),t._v(" "),a("p",[t._v("而第二个表达式是每一个多选分支之前都有脱字符，通过括号的限制实现，匹配一行的起始位置，然后匹配 "),a("code",[t._v("From")]),t._v("、"),a("code",[t._v("Subject")]),t._v(" 或者 "),a("code",[t._v("Date")]),t._v(" 中的任意一个，然后匹配 "),a("code",[t._v(":")]),t._v("。这样在匹配 E-mail 文本信息很有用。")]),t._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("egrep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'^(From|Subject|Date):'")]),t._v(" word.list \nFrom: jecyu.lin@gmail.com\nSubject: be seein\nDate: Web, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),t._v(" Oct "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2006")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(":37:24\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h4",{attrs:{id:"忽略大小写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#忽略大小写"}},[t._v("#")]),t._v(" 忽略大小写")]),t._v(" "),a("p",[t._v("E-mail header 的例子很适合用来说明不区分大小写（case-insensitive）的匹配的概念，可以使用 "),a("code",[t._v("[Ff][Rr][On][Mm]")]),t._v(" 取代 "),a("code",[t._v("From")]),t._v('，这样就可以匹配任何形式的 "from"，但缺点就是很不方便。')]),t._v(" "),a("p",[t._v("egrep 的命令行参数 "),a("code",[t._v("-i")]),t._v(" 表示进行忽略大小写的匹配，把 "),a("code",[t._v("-i")]),t._v(" 写在正则表达式之前：")]),t._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("egrep")]),t._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'^(From|Subject|Date):'")]),t._v(" word.list \nFrom: jecyu.lin@gmail.com\nSubject: be seein\nDate: Web, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),t._v(" Oct "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2006")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(":37:24\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("SUBJECT: MAKE MONEY FAST"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" --》大写\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h4",{attrs:{id:"单词分界符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单词分界符"}},[t._v("#")]),t._v(" 单词分界符")]),t._v(" "),a("p",[t._v("使用正则表达式时经常会遇到的一个问题，期望匹配的 “单词” 在另一个单词之中。")]),t._v(" "),a("p",[t._v("如果你的 egrep 支持 “元字符序列（metasequences）” "),a("code",[t._v("\\<")]),t._v(" 和 "),a("code",[t._v("\\>")]),t._v("，就可以使用它们来匹配单词分界的位置，可以把它们想象为单词版本的 "),a("code",[t._v("^")]),t._v(" 和 "),a("code",[t._v("$")]),t._v("，分别用来匹配单词的开头和结尾。")]),t._v(" "),a("p",[t._v("cat\ncatxxx\ncatany")]),t._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("egrep")]),t._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\<cat\\>'")]),t._v(" word.list \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" // 只匹配到 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("如果使用 "),a("code",[t._v("cat")]),t._v(" 会把上面三行都匹配上。")]),t._v(" "),a("p",[t._v("请注意，"),a("code",[t._v("<")]),t._v(" 和 "),a("code",[t._v(">")]),t._v(" 本身并不是元字符——只有当它们与斜线结合起来的时候，整个序列才具有特殊意义，这也是称为元字符序列的原因。")]),t._v(" "),a("h4",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("至今为止所见的元字符小结")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("元字符")]),t._v(" "),a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("匹配对象")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v(".")]),a("br"),a("code",[t._v("[...]")]),a("br"),a("code",[t._v("[^...]")])]),t._v(" "),a("td",[t._v("点号"),a("br"),t._v("字符组"),a("br"),t._v("排除型字符组")]),t._v(" "),a("td",[t._v("单个任意字符"),a("br"),t._v("列出的任意字符"),a("br"),t._v("未列出的任意字符")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("^")]),a("br"),a("code",[t._v("$")]),a("br"),a("code",[t._v("\\<")]),a("br"),a("code",[t._v("\\>")])]),t._v(" "),a("td",[t._v("脱字符"),a("br"),t._v("美元符"),a("br"),t._v("反斜线-小于"),a("br"),t._v("反斜线-大于")]),t._v(" "),a("td",[t._v("行的起始位置"),a("br"),t._v("行的结束为止"),a("br"),t._v("单词的起始位置"),a("br"),t._v("单词的结束位置")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("|")]),a("br"),a("code",[t._v("(...)")])]),t._v(" "),a("td",[t._v("竖线"),a("br"),t._v("括号")]),t._v(" "),a("td",[t._v("匹配分隔两边的任意一个表达式"),a("br"),t._v("限制竖线的作用范围（其他功能下文讨论）")])])])]),t._v(" "),a("p",[t._v("另外还有几点需要注意：")]),t._v(" "),a("ul",[a("li",[t._v("在字符组内部，元字符的定义规则（及它们的意义）是不一样的。例如，在字符组外部，点号是元字符，但是在内部则不是如此。相反，连字符只有在字符组内部（这是普遍情况）才是元字符，否则就不是。脱子符在字符组外部表示一个意思，在字符组内部紧接着"),a("code",[t._v("[")]),t._v(" 时表示另一个意思，其他情况下又表示别的意思。")]),t._v(" "),a("li",[t._v("不要混淆多选项和字符组。字符组 "),a("code",[t._v("[abc]")]),t._v(" 和多选项 "),a("code",[t._v("(a|b|c)")]),t._v(" 固然表示同一个意思，但是这个例子中的相似性并不能推广开来。无论列出的字符有多少，字符组只能匹配一个字符。相反，多选项可以匹配任意长度的文本，每个多选项可能匹配的文本都是独立的，"),a("code",[t._v("\\<(1,000,000|million|thousand.thou)\\>")]),t._v("。不过，多选项没有像字符组那样的排除功能。")])]),t._v(" "),a("h4",{attrs:{id:"可选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可选项"}},[t._v("#")]),t._v(" 可选项")]),t._v(" "),a("p",[t._v("现在来看 color 和 color 的匹配。它们的区别在于，后面的单词比前面的多一个 u，我们可以用"),a("code",[t._v("colou?r")]),t._v("来解决这个问题。元字符  "),a("code",[t._v("?")]),t._v("（也就是问号） 代表可选项。把它加在一个字符的后面，就表示此处容许出现这个字符，不过它的出现并非匹配成功的必要条件。")]),t._v(" "),a("h4",{attrs:{id:"其他量词：重复出现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他量词：重复出现"}},[t._v("#")]),t._v(" 其他量词：重复出现")]),t._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("egrep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<hr.+size.*=.*[0-9]+.*"')]),t._v(" index.html \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("hr "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("4")]),t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/hr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("次数下限")]),t._v(" "),a("th",[t._v("次数上限")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("?")])]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("可以不出现，也可以只出现一次（单次可选）")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("*")])]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("可以出现无数次，也可以不出现（任意次数均可）")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("+")])]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("可以出现无数次，但至少要出现一次（至少一次）")])])])]),t._v(" "),a("h5",{attrs:{id:"规定重现次数的范围：区间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#规定重现次数的范围：区间"}},[t._v("#")]),t._v(" 规定重现次数的范围：区间")]),t._v(" "),a("h4",{attrs:{id:"括号及反向引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#括号及反向引用"}},[t._v("#")]),t._v(" 括号及反向引用")]),t._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("egrep")]),t._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\<([a-z]+) +"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\1"}},[t._v("\\1")]),t._v("\\>'")]),t._v(" word.list \nthe the \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h2",{attrs:{id:"正则表达式在-javascript-中的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式在-javascript-中的使用"}},[t._v("#")]),t._v(" 正则表达式在 JavaScript 中的使用")]),t._v(" "),a("h3",{attrs:{id:"模式-（patterns）-和-修饰符（flags）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式-（patterns）-和-修饰符（flags）"}},[t._v("#")]),t._v(" 模式 （Patterns） 和 修饰符（flags）")]),t._v(" "),a("p",[t._v("在 JavaScript 中，正则表达式通过内置的 "),a("code",[t._v("RegExp")]),t._v(" 类的对象来实现，并与字符串集成。")]),t._v(" "),a("h3",{attrs:{id:"字符类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符类"}},[t._v("#")]),t._v(" 字符类")]),t._v(" "),a("h3",{attrs:{id:"unicode：修饰符-u-和-class-p"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unicode：修饰符-u-和-class-p"}},[t._v("#")]),t._v(" Unicode：修饰符 “u” 和 class\\p{...}")]),t._v(" "),a("h3",{attrs:{id:"锚点（anchors）：字符串开始-和-末尾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锚点（anchors）：字符串开始-和-末尾"}},[t._v("#")]),t._v(" 锚点（Anchors）：字符串开始 ^ 和 末尾 $")]),t._v(" "),a("h3",{attrs:{id:"flag-m-多行模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flag-m-多行模式"}},[t._v("#")]),t._v(" Flag“m” —— 多行模式")]),t._v(" "),a("h3",{attrs:{id:"词边界：-b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#词边界：-b"}},[t._v("#")]),t._v(" 词边界：\\b")]),t._v(" "),a("h3",{attrs:{id:"转义，特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转义，特殊字符"}},[t._v("#")]),t._v(" 转义，特殊字符")]),t._v(" "),a("h3",{attrs:{id:"集合和范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合和范围"}},[t._v("#")]),t._v(" 集合和范围"),a("code",[t._v("[...]")])]),t._v(" "),a("h3",{attrs:{id:"量词-和-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#量词-和-n"}},[t._v("#")]),t._v(" 量词 "),a("code",[t._v("+,*,?")]),t._v(" 和 "),a("code",[t._v("{n}")])]),t._v(" "),a("h3",{attrs:{id:"贪婪量词和惰性量词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪婪量词和惰性量词"}},[t._v("#")]),t._v(" 贪婪量词和惰性量词")]),t._v(" "),a("h3",{attrs:{id:"捕获组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#捕获组"}},[t._v("#")]),t._v(" 捕获组")]),t._v(" "),a("h3",{attrs:{id:"模式中的反向引用：-n-和-k"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式中的反向引用：-n-和-k"}},[t._v("#")]),t._v(" 模式中的反向引用：\\N 和 \\k"),a("name")],1),t._v(" "),a("h3",{attrs:{id:"选择（or）｜"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择（or）｜"}},[t._v("#")]),t._v(" 选择（OR）｜")]),t._v(" "),a("h3",{attrs:{id:"前瞻断言与后瞻断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前瞻断言与后瞻断言"}},[t._v("#")]),t._v(" 前瞻断言与后瞻断言")]),t._v(" "),a("h3",{attrs:{id:"灾难性回溯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#灾难性回溯"}},[t._v("#")]),t._v(" 灾难性回溯")]),t._v(" "),a("h2",{attrs:{id:"粘性标志-y-，在位置处搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#粘性标志-y-，在位置处搜索"}},[t._v("#")]),t._v(" 粘性标志 “y”，在位置处搜索")]),t._v(" "),a("h3",{attrs:{id:"正则表达式（regexp）和字符串（string）的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式（regexp）和字符串（string）的方法"}},[t._v("#")]),t._v(" 正则表达式（RegExp）和字符串（String）的方法")]),t._v(" "),a("h3",{attrs:{id:"正则表达式的创建和使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式的创建和使用"}},[t._v("#")]),t._v(" 正则表达式的创建和使用")]),t._v(" "),a("h4",{attrs:{id:"使用正则表达式字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用正则表达式字面量"}},[t._v("#")]),t._v(" 使用正则表达式字面量")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/[a-z]\\d+[a-z]/i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("strong",[t._v("优点")])]),t._v(" "),a("ul",[a("li",[t._v("简单方便")]),t._v(" "),a("li",[t._v("不需要考虑二次转义")])]),t._v(" "),a("p",[a("strong",[t._v("缺点")])]),t._v(" "),a("ul",[a("li",[t._v("子内容无法重复使用")]),t._v(" "),a("li",[t._v("过长的正则导致可读性差")])]),t._v(" "),a("h4",{attrs:{id:"使用-regexp-构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-regexp-构造函数"}},[t._v("#")]),t._v(" 使用 RegExp 构造函数")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" alphabet "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[a-z]"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("alphabet"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\\\d+")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("alphabet"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("strong",[t._v("优点：")])]),t._v(" "),a("ul",[a("li",[t._v("子内容可以重复使用。")]),t._v(" "),a("li",[t._v("可以通过控制子内容的粒度提高可读性。")])]),t._v(" "),a("p",[a("strong",[t._v("缺点")])]),t._v(" "),a("ul",[a("li",[t._v("二次转义的问题非常容易导致 bug")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\d+")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ddd"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"输出结果1 =>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"输出结果2 =>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确，需要添加斜杠转义")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\\\d+")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ddd"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"输出结果 result3 =>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// =>")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"输出结果 result4 =>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// =>")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("需要注意转义问题。")]),t._v(" "),a("ul",[a("li",[t._v("在字符串中，两个反斜杠被解释为一个反斜杠，然后在作为正则表达式， "),a("code",[t._v("\\\\")]),t._v(" 则被正则表达式引擎解释为 "),a("code",[t._v("\\")]),t._v("，所以在正则表达式中需要使用四个反斜杠。")]),t._v(" "),a("li",[t._v("同理，要匹配点号时，需要在点号之前加上两个反斜杠，否则将被正则表达式当作一个"),a("code",[t._v("点")]),t._v("号，一个点号在正则表达式中表示匹配任意字符了。")])]),t._v(" "),a("p",[t._v("避免混淆，统一：针对 "),a("code",[t._v("\\")]),t._v("、"),a("code",[t._v(".")]),t._v(" 统一进行转义。无论是字面量用法还是构造函数。")]),t._v(" "),a("h4",{attrs:{id:"常见用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见用法"}},[t._v("#")]),t._v(" 常见用法")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Reg.prototype.exec() 和 String.prototype.match()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/[a-z]\\d+[a-z]/i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a1a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1a1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["a1a", index: 0, input: "a1a", groups: undefined]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a1a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// result5 => ["a1a", index: 0, input: "a1a", groups: undefined]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result6 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1a1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// match 和 exec 对 g 的输出结果不同")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(a)/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a1a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// result1 => ["a", "a", index: 0, input: "a1a", groups: undefined]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a1a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// result2 => ["a", "a"]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// match 返回的数据格式不固定,")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h3",{attrs:{id:"两种模糊匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两种模糊匹配"}},[t._v("#")]),t._v(" 两种模糊匹配")]),t._v(" "),a("h4",{attrs:{id:"横向模糊匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#横向模糊匹配"}},[t._v("#")]),t._v(" 横向模糊匹配")]),t._v(" "),a("p",[t._v("横向模糊指的是，一个正则可匹配的字符串的"),a("strong",[t._v("长度不是固定")]),t._v("的，可以是多种情况的。")]),t._v(" "),a("p",[t._v("其实现的方式是使用"),a("strong",[t._v("量词")]),t._v("。譬如 "),a("code",[t._v("{m,n}")]),t._v("，表示连续出现最少 m 次，最多 n 次。")]),t._v(" "),a("p",[t._v("比如正则 /ab{2,5}c/ 表示匹配这样一个字符串：第一个字符是“a”，接下来是 2 到 5 个字符 “b”，最后是字符 “c”。")]),t._v(" "),a("p",[t._v("测试如下：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/ab{2,5}c/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc abbc abbbc abbbbbc abbbbbbc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" string1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// result1 => Array(3) ["abbc", "abbbc", "abbbbbc"]')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h4",{attrs:{id:"纵向模糊匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#纵向模糊匹配"}},[t._v("#")]),t._v(" 纵向模糊匹配")]),t._v(" "),a("p",[t._v("纵向模糊匹配指的是，一个正则匹配的字符串，具体到某一位字符时，它可以"),a("strong",[t._v("不是某个确定的字符")]),t._v("，可以有多种可能。")]),t._v(" "),a("p",[t._v("其实现的方式是使用**字符组。**譬如 [abc]，表示该字符是可以是字符 “a”、“b”、“c”中的任何一个。")]),t._v(" "),a("p",[t._v("比如 /a[123]b/ 可以匹配如下三种字符串：“a1b”、“a2b”、“a3b”")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/a[123]b/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a0b a1b a2b a3b a4b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// result => Array(3) ["a1b", "a2b", "a3b"]')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"字符组-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符组-2"}},[t._v("#")]),t._v(" 字符组")]),t._v(" "),a("h4",{attrs:{id:"常见的间写形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的间写形式"}},[t._v("#")]),t._v(" 常见的间写形式")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符组")]),t._v(" "),a("th",[t._v("具体含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("\\d")]),t._v(" "),a("td",[t._v("表示[0-9]。表示是一位数字")])]),t._v(" "),a("tr",[a("td",[t._v("\\D")]),t._v(" "),a("td",[t._v("表示[^0-9]。表示除数字以外的任意字符")])]),t._v(" "),a("tr",[a("td",[t._v("\\w")]),t._v(" "),a("td",[t._v("表示[0-9a-zA-Z_]。表示数字、大小写字母和下划线")])]),t._v(" "),a("tr",[a("td",[t._v("\\W")]),t._v(" "),a("td",[t._v("表示[^0-9a-za-z_]。表示非单词字符")])]),t._v(" "),a("tr",[a("td",[t._v("\\s")]),t._v(" "),a("td",[t._v("表示[ \\t\\v\\n\\r\\f]。表示空白符，包括空格、水平制表符、垂直制表符、回车符、换页符。记忆方式：s 是 space 的首字母，空白符的单词是 white space")])]),t._v(" "),a("tr",[a("td",[t._v("\\S")]),t._v(" "),a("td",[t._v("表示[^\\t\\v\\n\\r\\f]。非空白符")])]),t._v(" "),a("tr",[a("td",[t._v(".")]),t._v(" "),a("td",[t._v("表示 [^\\n\\r\\u2028\\u2029]。通配符，表示几乎任意字符。"),a("u",[t._v("换行符、回车符、行分隔符和段分隔符除外。")]),t._v(" 记忆方式：想想省略号 ... 中的每个点，都可以理解成占位符，表示任何类似的东西。")])])])]),t._v(" "),a("p",[t._v("如果想要匹配任意字符怎么办？可以使用 [\\d\\D]、[\\w\\W]、[\\s\\S]、[^] 中的任何一个。")]),t._v(" "),a("h3",{attrs:{id:"量词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#量词"}},[t._v("#")]),t._v(" 量词")]),t._v(" "),a("h4",{attrs:{id:"简写形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简写形式"}},[t._v("#")]),t._v(" 简写形式")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("量词")]),t._v(" "),a("th",[t._v("具体含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("{m,}")]),t._v(" "),a("td",[t._v("表示至少出现 m 次。")])]),t._v(" "),a("tr",[a("td",[t._v("{m}")]),t._v(" "),a("td",[t._v("等价于 {m,m}，表示出现 m 次")])]),t._v(" "),a("tr",[a("td",[t._v("?")]),t._v(" "),a("td",[t._v("等价于 {0,1}，表示出现或者不出现。记忆方式：问号的意思表示，有吗？")])]),t._v(" "),a("tr",[a("td",[t._v("+")]),t._v(" "),a("td",[t._v("等价于 {1,}, 表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。")])]),t._v(" "),a("tr",[a("td",[t._v("*")]),t._v(" "),a("td",[t._v("等价于 {0}，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。")])])])]),t._v(" "),a("h2",{attrs:{id:"正则表达式字符匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式字符匹配"}},[t._v("#")]),t._v(" 正则表达式字符匹配")]),t._v(" "),a("h2",{attrs:{id:"正则表达式位置匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式位置匹配"}},[t._v("#")]),t._v(" 正则表达式位置匹配")]),t._v(" "),a("h3",{attrs:{id:"和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和"}},[t._v("#")]),t._v(" ^ 和 $")]),t._v(" "),a("p",[t._v("^（脱字符）匹配开头，在多行匹配中匹配行开头。\n$（美元符号）匹配结尾，在多行匹配中匹配行结尾。")]),t._v(" "),a("h2",{attrs:{id:"regexp-实例上的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-实例上的属性"}},[t._v("#")]),t._v(" RegExp 实例上的属性")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("global")]),t._v(" "),a("td",[t._v("是否全文搜索，默认 false，对应修饰符 g，只读")])]),t._v(" "),a("tr",[a("td",[t._v("ignoreCase")]),t._v(" "),a("td",[t._v("是否大小写敏感，默认 false，对应修饰符 i，只读")])]),t._v(" "),a("tr",[a("td",[t._v("multiline")]),t._v(" "),a("td",[t._v("是否多行搜索，默认 false，对应修饰符 m，只读")])]),t._v(" "),a("tr",[a("td",[t._v("flags")]),t._v(" "),a("td",[t._v("返回修饰符，只读")])]),t._v(" "),a("tr",[a("td",[t._v("lastIndex")]),t._v(" "),a("td",[t._v("当前表达式匹配内容的最后一个字符的下一个位置")])]),t._v(" "),a("tr",[a("td",[t._v("source")]),t._v(" "),a("td",[t._v("正则表达式的文本字符串")])])])]),t._v(" "),a("h2",{attrs:{id:"常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用方法"}},[t._v("#")]),t._v(" 常用方法")]),t._v(" "),a("ul",[a("li",[t._v("RegExp.prototype.test(str)")]),t._v(" "),a("li",[t._v("RegExp.prototype.exec(str)")]),t._v(" "),a("li",[t._v("RegExp.prototype.search(reg)")]),t._v(" "),a("li",[t._v("String.prototype.split(reg)")]),t._v(" "),a("li",[t._v("String.prototype.match(reg)")]),t._v(" "),a("li",[t._v("String.prototype.replace(reg, str|num|function)")])]),t._v(" "),a("h3",{attrs:{id:"i-和-g"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-和-g"}},[t._v("#")]),t._v(" i 和 g")]),t._v(" "),a("p",[t._v("i 代表忽略大小写")]),t._v(" "),a("p",[t._v("g 代表全局匹配")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1211"')]),t._v(".replace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("*/g, "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaa'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1211"')]),t._v(".replace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("*/, "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a211'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"正则表达式括号的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式括号的作用"}},[t._v("#")]),t._v(" 正则表达式括号的作用")]),t._v(" "),a("p",[t._v("不管哪门语言中都有括号。正则表达式也是一门语言，而括号的存在使这门语言更为强大。")]),t._v(" "),a("h3",{attrs:{id:"分组和分支结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组和分支结构"}},[t._v("#")]),t._v(" 分组和分支结构")]),t._v(" "),a("p",[t._v("这二者是括号最直觉的作用，也是最原始的功能，强调括号内的正则是一个整体，即"),a("strong",[t._v("提供子表达式。")])]),t._v(" "),a("h4",{attrs:{id:"分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[t._v("#")]),t._v(" 分组")]),t._v(" "),a("p",[t._v("我们知道 "),a("code",[t._v("/a+/")]),t._v(" 匹配连续出现的 "),a("code",[t._v('"a"')]),t._v('，而要匹配连续出现的 "ab" 时，需要使用 '),a("code",[t._v("/(ab)+/")]),t._v("。")]),t._v(" "),a("p",[t._v("其中括号是提供分组功能，使量词 "),a("code",[t._v("+")]),t._v(" 作用于 "),a("code",[t._v('"ab"')]),t._v(" 这个整体，测试如下：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(a)/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a1a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// result => ["a", "a", index: 0, input: "a1a", groups: undefined]')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h4",{attrs:{id:"分支结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支结构"}},[t._v("#")]),t._v(" 分支结构")]),t._v(" "),a("h4",{attrs:{id:"分组引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组引用"}},[t._v("#")]),t._v(" 分组引用")]),t._v(" "),a("h5",{attrs:{id:"提取数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提取数据"}},[t._v("#")]),t._v(" 提取数据")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-06-05"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// =>[ '2020-06-05','2020','06','05',index: 0,input: '2020-06-05',groups: undefined ]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h5",{attrs:{id:"替换数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#替换数据"}},[t._v("#")]),t._v(" 替换数据")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-06-05"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("all"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" year"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" month"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" day")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("month"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("day"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("year"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '06/05/2020'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h4",{attrs:{id:"反向引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向引用"}},[t._v("#")]),t._v(" 反向引用")]),t._v(" "),a("p",[t._v("报数")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * \\d 匹配一个数字\n * \\1 匹配前面第一个括号内匹配的内容\n * (\\d)\\1* 匹配第一个括号相同的数字，0个多个，如1 => 1, 11 => 11, 112 => 11\n * g 会匹配所有符合规则的字符\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" preResult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(\\d)\\1*/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("这里的 "),a("code",[t._v("\\1")]),t._v(" 便是反向引用，表示引用第一个分组匹配的内容，后续还可以添加上量词表示 0 到多个。")]),t._v(" "),a("h3",{attrs:{id:"非获取匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非获取匹配"}},[t._v("#")]),t._v(" 非获取匹配")]),t._v(" "),a("p",[a("code",[t._v("?!")]),t._v("负向预查，非获取匹配")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^(?!index)\\w*.ts$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa.ts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => [ 'aaa.ts', index: 0, input: 'aaa.ts', groups: undefined ]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^(?!index)\\w*.ts$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index.ts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => null")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" req "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" require"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("context")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\.\\/(?!index)\\w*\\.ts$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 排除 index 入口文件，第三个参数匹配子目录")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"非捕获括号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非捕获括号"}},[t._v("#")]),t._v(" 非捕获括号")]),t._v(" "),a("h3",{attrs:{id:"相关案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关案例"}},[t._v("#")]),t._v(" 相关案例")]),t._v(" "),a("h2",{attrs:{id:"正则表达式回溯法原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式回溯法原理"}},[t._v("#")]),t._v(" 正则表达式回溯法原理")]),t._v(" "),a("h3",{attrs:{id:"正则表达式的拆分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式的拆分"}},[t._v("#")]),t._v(" 正则表达式的拆分")]),t._v(" "),a("h2",{attrs:{id:"项目应用案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目应用案例"}},[t._v("#")]),t._v(" 项目应用案例")]),t._v(" "),a("h3",{attrs:{id:"正则与数值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则与数值"}},[t._v("#")]),t._v(" 正则与数值")]),t._v(" "),a("h3",{attrs:{id:"正则与颜色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则与颜色"}},[t._v("#")]),t._v(" 正则与颜色")]),t._v(" "),a("h3",{attrs:{id:"正则与-url"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则与-url"}},[t._v("#")]),t._v(" 正则与 URL")]),t._v(" "),a("h3",{attrs:{id:"检索目录下的模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检索目录下的模块"}},[t._v("#")]),t._v(" 检索目录下的模块")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerGlobalComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" req "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" require"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("context")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\.vue$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("keys")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fileName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" componentConfig "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("req")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fileName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("componentConfig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n      fileName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n      fileName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^\\.\\/(.*\\/)?/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\.vue$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("component")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" componentConfig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("default "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" componentConfig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" registerGlobalComponent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h3",{attrs:{id:"读取获取二进制时响应头的名称"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读取获取二进制时响应头的名称"}},[t._v("#")]),t._v(" 读取获取二进制时响应头的名称")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/filename=(\\S.*?\\.\\w+)$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \\S 表示匹配非空白符 .表示通配符 *任意多个 \\. \\w 表示数字、大小写字母和下划线")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fileInfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"content-disposition"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Content-Disposition: attachment;fileName=档案日志导出2020-04-16 11:01:20.xlsx")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fileInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" filename "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fileInfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" fileInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"webpack-文件配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-文件配置"}},[t._v("#")]),t._v(" webpack 文件配置")]),t._v(" "),a("p",[t._v("webpack.config.js，引入 loader 和 plugin 需要处理的文件，使用了 test 正则表达式处理")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  mode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'development'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  entry"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./src/index.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以当前目录为根目录，入口文件")]),t._v("\n  output"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出文件")]),t._v("\n    path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./dist'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    filename"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bundle.js'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引入loader 和 plugin 处理相关文件")]),t._v("\n  module"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    rules"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 正则表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里")]),t._v("\n        use"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("对应的 loader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  plugin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("h3",{attrs:{id:"时间格式化工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间格式化工具"}},[t._v("#")]),t._v(" 时间格式化工具")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @description 时间格式化工具\n * @param {Date} date对象\n * @param {String} fmt YYYY-MM-DD HH:mm:ss => 2019-03-07 21:43:43\n * @returns {String}\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("FormateDate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("date"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fmt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("padLeftZero")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(Y+)/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      RegExp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFullYear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" RegExp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"M+"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMonth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"D+"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"H+"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHours")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"m+"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMinutes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s+"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSeconds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据模板来替换")]),t._v("\n      fmt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        RegExp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        RegExp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("padLeftZero")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br")])]),a("h3",{attrs:{id:"apache-conf-httpd-conf-增加配置禁用脚本执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apache-conf-httpd-conf-增加配置禁用脚本执行"}},[t._v("#")]),t._v(" apache conf/httpd.conf 增加配置禁用脚本执行")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Files ~ "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".+.ph(p[3457]?|t|tml)."')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n        Order Allow,Deny\n        Deny from al\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/Files"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"爬取网页过滤关键词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#爬取网页过滤关键词"}},[t._v("#")]),t._v(" 爬取网页过滤关键词")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("怎样用好正则表达式")]),t._v(" "),a("ul",[a("li",[t._v("明确需求")]),t._v(" "),a("li",[t._v("考虑全面")]),t._v(" "),a("li",[t._v("反复测试")])]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[t._v("《精通正则表达式》 本书着重讲解关于正则表达式匹配原理、优化方法和使用技巧，读完之后你会觉得豁然开朗，没想到正则表达式还有这样一片天空。可能读过一遍之后会觉得摸不到头脑，没关系，只要阅读一边，然后放在手边随时作为手册参考，就能让你的技术水平提高一大截的，从思想上理解正则表达式。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://study.qiyun.360.cn/course/festar2020",target:"_blank",rel:"noopener noreferrer"}},[t._v("《360 前端星计划》"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("《JavaScript 正则迷你书》")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/chrmarti/vscode-regex/",target:"_blank",rel:"noopener noreferrer"}},[t._v("vscode-regex"),a("OutboundLink")],1),t._v(" vscode 插件 Regex Previewer -这是一个用于实时测试正则表达式的实用工具。它可以将正则表达式模式应用在任何打开的文件上，并高亮所有的匹配项。")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://ppt.baomitu.com/d/6f04cd7c#/",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则的三个应用场景"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5b61b0f86fb9a04fd343af8f#heading-25",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS 正则表达式必知必会"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("https://zh.javascript.info/regexp-introduction")]),t._v(" "),a("li",[t._v("《精通正则表达式》")])])])}),[],!1,null,null,null);s.default=e.exports}}]);